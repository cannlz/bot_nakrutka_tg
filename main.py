#–ò–ú–ü–û–†–¢–´
from aiogram import types, executor, Dispatcher, Bot
import datetime
import sqlite3 as sq
from pathlib import Path
import re
import request
import asyncio
import testoplata
import creator_bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import urlextract
import random
from datetime import datetime
import nest_asyncio
import configparser
import os
import requests
import subprocess
from webserver import keep_alive

# –§–ò–ö–° –†–ê–ë–û–¢–´ –¶–ò–ö–õ–û–í LOOP
nest_asyncio.apply()

#–ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
def getSettings(filename):
    config = configparser.ConfigParser()
    config.read(filename)
    dataCfg = []
    dataCfg.append(config.get("settings", "BOT_TOKEN"))
    dataCfg.append(config.get("settings", "CASH_BOOST_USER"))
    dataCfg.append(config.get("settings", "DEFAULT_CASH_BOOST"))
    return dataCfg


# –°–û–ó–î–ê–ù–ï –§–ê–ô–õ–ê –ë–î
createbse = Path('telegrammoney.db')
createbse.touch(exist_ok=True)

#–ö–û–ù–ù–ï–ö–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•
global baseMain, cur
baseMain = sq.connect('telegrammoney.db')
cur = baseMain.cursor()

# –¢–û–ö–ï–ù –ë–û–¢–ê
bot = Bot(token = getSettings('config_main.txt')[0], parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
botNotification = Bot(token = '5906203663:AAEngC8A1I1R-rKG8ETpmhktPfZM2v6kitY', parse_mode="HTML")
dpNotification = Dispatcher(botNotification, storage=MemoryStorage())

#–ú–ê–ù–ò–®–´ –°–û–°–¢–û–Ø–ù–ò–ô
class InputCountNumber(StatesGroup):
    sum_cost = State()
    sum_cashout = State()
    data_cashout = State()
    waiting_for_new_percent = State()
    waiting_for_token = State()
    waiting_for_percent = State()

#–°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•
def create_tables():
    baseMain.execute('''CREATE TABLE IF NOT EXISTS USER_ORDER
                    (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                    id_user INTEGER NOT NULL,
                    date STRING NOT NULL,
                    id_uslygi INTEGER NOT NULL,
                    link_on_group STRING NOT NULL,
                    quantity INTEGER NOT NULL,
                    money DOUBLE NOT NULL,
                    order_number INTEGER NOT NULL,
                    status STRING NOT NULL);''')                           
    baseMain.commit()
    baseMain.execute('''CREATE TABLE IF NOT EXISTS USERS 
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        money DOUBLE NOT NULL DEFAULT 0,
                        earned DOUBLE DEFAULT 0,
                        user_bot STRING,
                        bot_token STRING,
                        cash_up INTEGER);''')
    baseMain.commit()                    
    baseMain.execute('''CREATE TABLE IF NOT EXISTS USER_PAY 
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        date STRING NOT NULL,
                        sum_cash DOUBLE NOT NULL,
                        status STRING NOT NULL DEFAULT WAIT,
                        secretLabel STRING NOT NULL DEFAULT 0,
                        good_pay_check STRING DEFAULT False);''')
    baseMain.commit()


def register_user(user_id):
    create_tables()
    user_check_data = baseMain.execute("SELECT user_id FROM USERS WHERE user_id = ?",(str(user_id), )).fetchone()
    if str(user_id) not in str(user_check_data):
        money = 0
        baseMain.execute(f'INSERT INTO USERS (user_id, money) VALUES ("{user_id}", "{money}");')
        baseMain.commit()

def restart_all_bots():
    botsUser = baseMain.execute("SELECT user_bot FROM USERS").fetchall()
    for onceBot in botsUser:
        print(onceBot[0], "started...")
        command = f"cd {onceBot[0]}&&python main.py"
        subprocess.Popen(command, shell=True)

@dp.message_handler(commands=["check"], state="*")
async def check_secret_command(msg: types.Message):
    if msg.from_user.id == 407073449 or msg.from_user.id == 1004005938:
        botsUserJ = baseMain.execute("SELECT COUNT(user_id) FROM USERS").fetchone()[0]
        await bot.send_message(chat_id=msg.from_user.id, text=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {botsUserJ}")


@dp.message_handler(commands=["restartPenis"], state="*")
async def handler_search(msg: types.Message):
    if msg.from_user.id == 407073449 or msg.from_user.id == 1004005938:
        print("BOTS RESTARTED")
        restart_all_bots()
        await bot.send_message(chat_id=msg.from_user.id, text="–ë–æ—Ç—ã –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")

#–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
@dp.message_handler(commands=["start"], state="*")
async def handler(msg: types.Message):
    user_id = msg.from_user.id
    register_user(user_id)
    markup_inline = types.InlineKeyboardMarkup()
    test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞üíé", callback_data="create_new_bot")
    balans = types.InlineKeyboardButton(text="–ú–æ–π –±–æ—Ç üíµ", callback_data="balanss")
    infoButton = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infoButton")
    markup_inline.add(test_btn_create_bot).add(balans).add(infoButton)
    

    await msg.answer(f'üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {msg.from_user.username}!\n\nüî•–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ —Å–æ—Ü. —Å–µ—Ç–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–º.\n–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫ —Å–∏—Å—Ç–µ–º–µ MoBot, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏.\n\n–ì–æ—Ç–æ–≤—ã? –¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π—Ç–µ "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - @mobot_support', reply_markup=markup_inline)


#–ö–ê–õ–ë–ï–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
@dp.callback_query_handler(text_startswith="Start", state="*")
async def start_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    print("current state: ", current_state)

    checkMoneyTake.work = False

    markup_inline = types.InlineKeyboardMarkup()
    test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞üíé", callback_data="create_new_bot")
    balans = types.InlineKeyboardButton(text="–ú–æ–π –±–æ—Ç üíµ", callback_data="balanss")
    infoButton = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infoButton")
    markup_inline.add(test_btn_create_bot).add(balans).add(infoButton)

    await call.message.edit_text(f'üéâ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {call.from_user.username}!\n\nüî•–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏ —Å–æ—Ü. —Å–µ—Ç–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–µ–º.\n–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫ —Å–∏—Å—Ç–µ–º–µ MoBot, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Ü–µ–Ω–∫—É –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥ —Å –∫–∞–∂–¥–æ–π –ø—Ä–æ–¥–∞–∂–∏.\n\n–ì–æ—Ç–æ–≤—ã? –¢–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–π—Ç–µ "–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - @mobot_support', reply_markup=markup_inline)


#–ö–ê–õ–ë–ï–ö –ö–ù–û–ü–ö–ò "–ò–ù–§–û–†–ú–ê–¶–ò–Ø"
@dp.callback_query_handler(text_startswith="infoButton", state="*")
async def infoButton(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    if current_state:  
        await state.finish()

    checkMoneyTake.work = False

    markup_inline = types.InlineKeyboardMarkup()
    nakrutka = types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ü§∑", callback_data="podecjkaa")
    zakaz = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞üìñ", callback_data="pravilaa")
    back_btn = types.InlineKeyboardButton(text="‚ùå–ù–∞–∑–∞–¥", callback_data="Start")
    markup_inline.add(nakrutka).add(zakaz).add(back_btn)

    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_inline)


#–ö–ê–õ–ë–ï–ö –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê
@dp.callback_query_handler(text_startswith="create_new_bot")
async def create_new_bot(call: types.CallbackQuery):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    startCreateBot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ üíé", callback_data="startCreateBot")
    back_btn = types.InlineKeyboardButton(text="‚ùå–ù–∞–∑–∞–¥", callback_data="Start")
    markup_inline.add(startCreateBot).add(back_btn)
    await call.message.edit_text("‚û°Ô∏è–í –≤–∞—à–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—Å–µ —É—Å–ª—É–≥–∏ –±—É–¥—É—Ç —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É –Ω–∞—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º. –í–µ—Å—å –¥–æ—Ö–æ–¥ –æ—Ç —É—Å–ª—É–≥ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ @MoVisionbot, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤. \n\n–†–∞–±–æ—Ç–∞–π—Ç–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥!", reply_markup=markup_inline)


@dp.callback_query_handler(text_startswith="bot_settings")
async def bot_settings(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    btn_procent_10 = types.InlineKeyboardButton('10%', callback_data='10p')
    btn_procent_25 = types.InlineKeyboardButton('25%', callback_data='25p')
    btn_procent_50 = types.InlineKeyboardButton('50%', callback_data='50p')
    btn_procent_75 = types.InlineKeyboardButton('75%', callback_data='75p')
    btn_procent_100 = types.InlineKeyboardButton('100%', callback_data='100p')
    markup_inline.add(btn_procent_10, btn_procent_25, btn_procent_50, btn_procent_75, btn_procent_100).add(back_btn)

    bot_token = baseMain.execute(f'SELECT bot_token FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    url = f"https://api.telegram.org/bot{bot_token}/getMe"

    headers = {
        "accept": "application/json",
        "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
    }

    response = requests.post(url, headers=headers)
    data = response.json()
    responseOrder = data['result']
    responseOrder1 = responseOrder['username']
    anwerLink = "@" + f"{responseOrder1}"
    cash_up = baseMain.execute(f'SELECT cash_up FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    await call.message.edit_text(f"‚úÖ–í–∞—à –±–æ—Ç: {anwerLink}\nüíé–ù–∞—Ü–µ–Ω–∫–∞: {cash_up}%\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Ü–µ–Ω–∫—É: ", reply_markup=markup_inline)
    chekOptionsEdit.worksettings = False
    await InputCountNumber.waiting_for_percent.set()
                                                                    

#–ö–ê–õ–ë–ï–ö –ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê
@dp.callback_query_handler(text_startswith="startCreateBot")
async def startCreateBot(call: types.CallbackQuery):
    await call.answer()
    check_bots_limit = baseMain.execute(f'SELECT bot_token FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    if len(str(check_bots_limit)) != 46:
        markup_inline = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        btn_procent_10 = types.InlineKeyboardButton('10%', callback_data='10p')
        btn_procent_25 = types.InlineKeyboardButton('25%', callback_data='25p')
        btn_procent_50 = types.InlineKeyboardButton('50%', callback_data='50p')
        btn_procent_75 = types.InlineKeyboardButton('75%', callback_data='75p')
        btn_procent_100 = types.InlineKeyboardButton('100%', callback_data='100p')
        markup_inline.add(btn_procent_10, btn_procent_25, btn_procent_50, btn_procent_75, btn_procent_100).add(back_btn)
        await call.message.edit_text("üíé–í—ã–±–µ—Ä–µ—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏:", reply_markup=markup_inline)
        chekOptionsEdit.worksettings = True
        await InputCountNumber.waiting_for_percent.set()
    else:
        url = f"https://api.telegram.org/bot{check_bots_limit}/getMe"

        headers = {
            "accept": "application/json",
            "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
        }

        response = requests.post(url, headers=headers)
        data = response.json()
        responseOrder = data['result']
        responseOrder1 = responseOrder['username']
        anwerLink = "@" + f"{responseOrder1}"
        cash_up = baseMain.execute(f'SELECT cash_up FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
        markup_inline = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        btn_procent_10 = types.InlineKeyboardButton('10%', callback_data='10p')
        btn_procent_25 = types.InlineKeyboardButton('25%', callback_data='25p')
        btn_procent_50 = types.InlineKeyboardButton('50%', callback_data='50p')
        btn_procent_75 = types.InlineKeyboardButton('75%', callback_data='75p')
        btn_procent_100 = types.InlineKeyboardButton('100%', callback_data='100p')
        markup_inline.add(btn_procent_10, btn_procent_25, btn_procent_50, btn_procent_75, btn_procent_100).add(back_btn)
        await call.message.edit_text(f"‚ùå–û—à–∏–±–∫–∞! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç.\n–í–∞—à –±–æ—Ç: {anwerLink}\nüíé–ù–∞—Ü–µ–Ω–∫–∞: {cash_up}%\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Ü–µ–Ω–∫—É: ", reply_markup=markup_inline)
        chekOptionsEdit.worksettings = False
        await InputCountNumber.waiting_for_percent.set()

class chekOptionsEdit:
    worksettings = True
    #–ú–ê–®–ò–ù–ê –û–ñ–ò–î–ê–ù–ò–Ø –ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê(–ü–†–û–¶–ï–ù–¢–´)
    @dp.callback_query_handler(lambda c: c.data in ['10p', '25p', '50p', '75p', '100p'], state=InputCountNumber.waiting_for_percent)
    async def process_percent_choice(query: types.CallbackQuery, state: FSMContext):
        while chekOptionsEdit.worksettings:
            percent = query.data[:-1]
            await state.update_data(percent=percent)

            await query.message.edit_text('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Å–≤–æ–µ–≥–æ Telegram-–±–æ—Ç–∞ —É @BotFather, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–∏–º –ø—Ä–æ—Å—Ç—ã–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:\n\n–ù–∞–π–¥–∏—Ç–µ @BotFather –≤ Telegram –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å –Ω–∏–º —á–∞—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newbot, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞.\n–ë–æ—Ç–§–∞–∑–µ—Ä –ø–æ–ø—Ä–æ—Å–∏—Ç –≤–∞—Å –≤–≤–µ—Å—Ç–∏ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ.\n–ó–∞—Ç–µ–º –≤—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞. –û–Ω –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ ¬´bot¬ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, MyCoolBot.\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã –≤–≤–µ–¥–µ—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, BotFather –≤—ã–¥–∞—Å—Ç –≤–∞–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞\n\nüü†API –∫–ª—é—á –±–æ—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ @botfather):')
            async with state.proxy() as data:
                data['callMessageID'] = query.message.message_id
            await InputCountNumber.waiting_for_token.set()
        else:
            percent = query.data[:-1]
            await state.update_data(percent=percent)
            baseMain.execute(f'UPDATE USERS SET cash_up = {percent} WHERE user_id="{query.from_user.id}"')
            baseMain.commit()
            markup_inline = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
            btn_procent_10 = types.InlineKeyboardButton('10%', callback_data='10p')
            btn_procent_25 = types.InlineKeyboardButton('25%', callback_data='25p')
            btn_procent_50 = types.InlineKeyboardButton('50%', callback_data='50p')
            btn_procent_75 = types.InlineKeyboardButton('75%', callback_data='75p')
            btn_procent_100 = types.InlineKeyboardButton('100%', callback_data='100p')
            markup_inline.add(btn_procent_10, btn_procent_25, btn_procent_50, btn_procent_75, btn_procent_100).add(back_btn)
            bot_token = baseMain.execute(f'SELECT bot_token FROM USERS WHERE user_id = {query.from_user.id}').fetchone()[0]
            url = f"https://api.telegram.org/bot{bot_token}/getMe"

            headers = {
                "accept": "application/json",
                "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
            }

            response = requests.post(url, headers=headers)
            data = response.json()
            responseOrder = data['result']
            responseOrder1 = responseOrder['username']
            anwerLink = "@" + f"{responseOrder1}"
            cash_up = baseMain.execute(f'SELECT cash_up FROM USERS WHERE user_id = {query.from_user.id}').fetchone()[0]
            directory = baseMain.execute(f'SELECT user_bot FROM USERS WHERE user_id = {query.from_user.id}').fetchone()[0]
            await creator_bot.changeSettings(directory, cash_up)
            await query.message.edit_text(f"‚úÖ–í–∞—à –±–æ—Ç: {anwerLink}\nüíé–ù–∞—Ü–µ–Ω–∫–∞: {cash_up}%\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Ü–µ–Ω–∫—É: ", reply_markup=markup_inline)
            await state.finish()
            chekOptionsEdit.worksettings = False
            await InputCountNumber.waiting_for_percent.set()

    

#–ú–ê–®–ò–ù–ê –û–ñ–ò–î–ê–ù–ò–Ø –ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê(–¢–û–ö–ï–ù)
@dp.message_handler(state=InputCountNumber.waiting_for_token)
async def process_new_bot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    percent = data.get('percent')
    callMessageID = data.get("callMessageID")
    async with state.proxy() as proxy:
        proxy['messagesend'] = message.text 
    if proxy["messagesend"] != "" and proxy["messagesend"] != "/start":
        
        bot_token = message.text
        if len(bot_token) != 46:
            markup_inline = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
            markup_inline.add(back_btn)
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=callMessageID, text="‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 46 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=markup_inline)
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
            await InputCountNumber.waiting_for_token.set()

        else:
            await bot.delete_message(message.chat.id, message.message_id)
            bot_name = f"{message.from_user.id}" + "_bot"
            try:
                baseMain.execute(f'UPDATE USERS SET user_bot= "{bot_name}", bot_token = "{bot_token}", cash_up = {percent} WHERE user_id="{message.from_user.id}"')
                baseMain.commit()
            except Exception as eroor:
                print(eroor)
            answer_good = await creator_bot.create_folder(percent, bot_token, bot_name)
            markup_inline = types.InlineKeyboardMarkup()
            test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞üíé", callback_data="create_new_bot")
            balans = types.InlineKeyboardButton(text="–ú–æ–π –±–æ—Ç üíµ", callback_data="balanss")
            infoButton = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüìö", callback_data="infoButton")
            markup_inline.add(test_btn_create_bot).add(balans).add(infoButton)
            try:
                await bot.delete_message(message.chat.id, callMessageID)
                await bot.send_message(chat_id=message.from_user.id, text=f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞: {answer_good}, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø–æ–¥ –≤–∞—à—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –±–æ—Çüíµ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è".', reply_markup=markup_inline)
            except Exception as e:
                print(e)
            await state.finish()
    else:
        await state.finish()


#–ö–ê–õ–ë–ï–ö –ö–ù–û–ü–ö–ò "–ú–û–ô –ë–û–¢"
@dp.callback_query_handler(text_startswith="balanss", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
        
    markup_inline = types.InlineKeyboardMarkup()
    markup_inline_prem = types.InlineKeyboardMarkup()
    markup_inline_error = types.InlineKeyboardMarkup()
    bot_settings = types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è", callback_data="bot_settings")
    oplataa = types.InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –±–æ—Ç–µ", callback_data="sendMoney")
    cash_out = types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞üíµ", callback_data="cashOutMoney")
    test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞üíé", callback_data="create_new_bot")
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ù–∞–∑–∞–¥", callback_data="Start")
    markup_inline.add(bot_settings, cash_out).add(oplataa).add(glavnoe_menu)
    markup_inline_prem.add(bot_settings, cash_out).add(glavnoe_menu)
    markup_inline_error.add(test_btn_create_bot).add(glavnoe_menu)

    try:
        check_bots_limit = baseMain.execute(f'SELECT bot_token FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
        url = f"https://api.telegram.org/bot{check_bots_limit}/getMe"

        headers = {
            "accept": "application/json",
            "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
        }

        response = requests.post(url, headers=headers)
        data = response.json()
        responseOrder = data['result']
        responseOrder1 = responseOrder['username']
        anwerLink = "@" + f"{responseOrder1}"

        new_path = baseMain.execute(f'SELECT user_bot FROM USERS WHERE user_id = {int(call.from_user.id)}').fetchone()[0]
        baseMainNotification = sq.connect(f"{new_path}/telegrammoney.db")
        baseUsers = baseMainNotification.execute(f'SELECT COUNT(user_id) FROM USERS').fetchone()[0]
        baseOrders = baseMainNotification.execute(f'SELECT COUNT(id_user) FROM USER_ORDER').fetchone()[0]
        basePays = baseMainNotification.execute(f'SELECT COUNT(user_id) FROM USER_PAY').fetchone()[0]
        print(baseUsers, baseOrders, basePays)

        moneyAccount = float('{:.2f}'.format(baseMain.execute(f'SELECT money FROM USERS WHERE user_id = {int(call.from_user.id)}').fetchone()[0]))
        moneyAccountEarned = float('{:.2f}'.format(baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {int(call.from_user.id)}').fetchone()[0])) 

        if moneyAccount > 100:
            await call.message.edit_text(f'–£—Å–ª—É–≥–∞ "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –±–æ—Ç–µ" –∞–∫—Ç–∏–≤–∏—Ä–æ–∞–Ω–∞\n\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É {anwerLink}:\n\nüë±‚Äç‚ôÇÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {baseUsers}—á–µ–ª.\nüõç–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {baseOrders}—à—Ç.\nüí≥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {basePays}—à—Ç.\n\n–ë–∞–ª–∞–Ω—Å –Ω–∞ –≤—ã–≤–æ–¥: {moneyAccountEarned}—Ä.', reply_markup=markup_inline_prem)
        else:
            await call.message.edit_text(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç—É {anwerLink}:\n\nüë±‚Äç‚ôÇÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {baseUsers}—á–µ–ª.\nüõç–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {baseOrders}—à—Ç.\nüí≥–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {basePays}—à—Ç.\n\n–ë–∞–ª–∞–Ω—Å –Ω–∞ –≤—ã–≤–æ–¥: {moneyAccountEarned}—Ä.", reply_markup=markup_inline)
            
    except Exception as e:
        print(e)
        await call.message.edit_text('‚ùå–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–∂–º–∏–Ω—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=markup_inline_error)

    

#–°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í
@dp.callback_query_handler(text_startswith="cashOutMoney", state="*")
async def admin_menu(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    moneyCard = types.InlineKeyboardButton(text="üí≥–ù–∞ –∫–∞—Ä—Ç—É", callback_data="cashOutCard")
    moneyQiwi = types.InlineKeyboardButton(text="ü•ù–ù–∞ Qiwi", callback_data="cashOutQiwi")
    moneyYoomoney = types.InlineKeyboardButton(text="üí∞–ù–∞ –Æ–º–∞–Ω–∏", callback_data="cashOutYoomoney")
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(moneyCard, moneyQiwi).add(moneyYoomoney).add(glavnoe_menu)

    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    
    moneyCard = float('{:.2f}'.format(float(moneyCashOut) - ((float(moneyCashOut)*0.03) + 45)))
    moneyQiwi = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.03)))
    moneyYoomoney = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.005)))

    if moneyCard < 0:
        moneyCard = 0
    elif moneyQiwi < 0:
        moneyQiwi = 0
    elif moneyYoomoney < 0:
        moneyYoomoney = 0    
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyCashOut}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\nüí≥–ù–∞ –∫–∞—Ä—Ç—É: {moneyCard}—Ä. (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å–∏–∏: 3% + 45—Ä)\nü•ù–ù–∞ Qiwi: {moneyQiwi}—Ä. (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å–∏–∏: 3%)\nüí∞–ù–∞ –Æ–º–∞–Ω–∏: {moneyYoomoney}—Ä. (—Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å–∏–∏: 0.5%)', reply_markup=markup_inline)

#–í–´–í–û–î –ù–ê –ö–ê–†–¢–£
@dp.callback_query_handler(text_startswith="cashOutCard", state="*")
async def cashOutCard(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    moneyCard = float('{:.2f}'.format(float(moneyCashOut) - ((float(moneyCashOut)*0.03) + 45)))

    async with state.proxy() as data:
        data['callMessageID'] = call.message.message_id
        data['type_cash'] = "–ù–∞ –∫–∞—Ä—Ç—É"
        data['moneyCard'] = moneyCard
    if moneyCard < 0:
        moneyCard = 0
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyCard}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫ –≤—ã–≤–æ–¥—É: ', reply_markup=markup_inline)
    await InputCountNumber.sum_cashout.set()

#–í–´–í–û–î –ù–ê –ö–ò–í–ò
@dp.callback_query_handler(text_startswith="cashOutQiwi", state="*")
async def cashOutCard(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    moneyQiwi = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.03)))

    async with state.proxy() as data:
        data['callMessageID'] = call.message.message_id
        data['type_cash'] = "–ù–∞ Qiwi"
        data['moneyCard'] = moneyQiwi
    if moneyQiwi < 0:
        moneyQiwi = 0
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyQiwi}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫ –≤—ã–≤–æ–¥—É: ', reply_markup=markup_inline)
    await InputCountNumber.sum_cashout.set()

#–í–´–í–û–î –ù–ê –Æ–ú–ê–ù–ò
@dp.callback_query_handler(text_startswith="cashOutYoomoney", state="*")
async def cashOutCard(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    moneyYoomoney = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.005)))

    async with state.proxy() as data:
        data['callMessageID'] = call.message.message_id
        data['type_cash'] = "–ù–∞ –Æ–º–∞–Ω–∏"
        data['moneyCard'] = moneyYoomoney
    if moneyYoomoney < 0:
        moneyYoomoney = 0
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyYoomoney}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫ –≤—ã–≤–æ–¥—É: ', reply_markup=markup_inline)
    await InputCountNumber.sum_cashout.set()

#–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –í–´–ü–õ–ê–¢–´ –í–û–†–ö–ï–†–£(–°—É–º–º–∞)
@dp.message_handler(state=InputCountNumber.sum_cashout) 
async def naviga(message: types.Message, state: FSMContext):
    data_state = await state.get_data()
    callMessageID = data_state.get("callMessageID")
    type_cash = data_state.get("type_cash")
    moneyCard = data_state.get("moneyCard")
    #print(data_state)
    #await state.finish()
    async with state.proxy() as proxy:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        proxy['messagesendCash'] = message.text
    if proxy["messagesendCash"] != "/start" and proxy["messagesendCash"] != "":
        markup_inline = types.InlineKeyboardMarkup()
        markup_inlineError = types.InlineKeyboardMarkup()
        glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        markup_inline.add(glavnoe_menu)
        markup_inlineError.add(glavnoe_menu)
        answerCount = message.text
        messageID = callMessageID

        if float(answerCount) >= 200 and answerCount != "" and float(answerCount) <= float(moneyCard):
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üü¢–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {answerCount}—Ä.\n\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:', reply_markup=markup_inline)
            #global_dict("", answerCount, "", "add")
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount
            await InputCountNumber.data_cashout.set() 
        else:
            if moneyCard < 0:
                moneyCard = 0
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üî¥–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {answerCount}—Ä.\n\nüîº–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {moneyCard}—Ä.\nüîΩ–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: 200—Ä. \n\n‚ÄºÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', reply_markup=markup_inlineError)
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount
            await InputCountNumber.sum_cashout.set()

        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await state.finish()

#–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –í–´–ü–õ–ê–¢–´ –í–û–†–ö–ï–†–£(—Ä–µ–∫–≤–µ–∑–∏—Ç—ã)
@dp.message_handler(state=InputCountNumber.data_cashout) 
async def naviga(message: types.Message, state: FSMContext):
    data_state = await state.get_data()
    callMessageID = data_state.get("callMessageID")
    type_cash = data_state.get("type_cash")
    moneyCard = data_state.get("moneyCard")
    answerCount_summ = data_state.get("answerCount")
    print(data_state)

    async with state.proxy() as proxy:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        proxy['messagesendCash'] = message.text
    if proxy["messagesendCash"] != "/start" and proxy["messagesendCash"] != "":
        markup_inline = types.InlineKeyboardMarkup()
        markup_inlineError = types.InlineKeyboardMarkup()
        oplataGenOrder = types.InlineKeyboardButton(text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="startRequestCashOut")
        glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        markup_inline.add(oplataGenOrder).add(glavnoe_menu)
        markup_inlineError.add(glavnoe_menu)
        answerCount = message.text
        messageID = callMessageID

        if  answerCount != "" and answerCount != " ":
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üü¢–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {answerCount_summ}—Ä.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –≤—ã–ø–ª–∞—Ç—ã: {answerCount}\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüîΩ', reply_markup=markup_inline)
            #global_dict("", answerCount, "", "add")
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount_summ
                data['answerCount_1'] = answerCount    
        else:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'‚ÄºÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', reply_markup=markup_inlineError)
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount_summ
                data['answerCount_1'] = answerCount    
            await InputCountNumber.data_cashout.set()

        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await state.finish()

#–ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –í–´–ü–õ–ê–¢–´
@dp.callback_query_handler(text_startswith="startRequestCashOut", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    #callMessageID = data_state.get("callMessageID")
    type_cash = data_state.get("type_cash")
    moneyCard = data_state.get("moneyCard")
    answerCount_summ = data_state.get("answerCount")
    answerCount_requez = data_state.get("answerCount_1")
    print(data_state)
    await call.answer()
    await state.finish()
    current_state = await state.get_state()
    print("pay request finish state: ", current_state)


    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
    markup.add(glavnoe_menu)
    

    lastBalance = float('{:.2f}'.format(float(moneyCard) - float(answerCount_summ)))
    baseMain.execute(f'UPDATE USERS SET earned = {float(lastBalance)} WHERE user_id = "{call.from_user.id}"')
    baseMain.commit()
    await botNotification.send_message('407073449', f'‚úÖ–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É\n–°—É–º–º–∞: {answerCount_summ}—Ä.\n–°–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã: {type_cash}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {answerCount_requez}\n–í–æ—Ä–∫–µ—Ä: {call.from_user.id}')
    await call.message.edit_text(f'‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ\n\n–°—É–º–º–∞: {answerCount_summ}—Ä.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {answerCount_requez}', reply_markup=markup)
    baseMain.execute(f'DELETE FROM USER_ORDER WHERE status = "–í—ã–ø–æ–ª–Ω–µ–Ω‚úÖ"')
    baseMain.commit()

#–í–´–ë–û–† –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´
@dp.callback_query_handler(text_startswith="sendMoney", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
    
    markup_inline = types.InlineKeyboardMarkup()
    popolnenie = types.InlineKeyboardButton(text="–Æ–º–∞–Ω–∏", callback_data="startRequestOplata")
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(popolnenie).add(glavnoe_menu)

    #moneyAccount = float('{:.2f}'.format(baseMain.execute(f'SELECT money FROM USERS WHERE user_id = {int(call.from_user.id)}').fetchone()[0]))
    await call.message.edit_text('–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: 200—Ä\n\n–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏:', reply_markup=markup_inline)

#–û–ñ–ò–î–ê–ù–ò–ï –û–ü–õ–ê–¢–´ –ü–û–î–ü–ò–°–ö–ò
@dp.callback_query_handler(text_startswith="startRequestOplata", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    sumPay = 200

    labelSecret = ""
    for x in range(16): #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (16)
        labelSecret = labelSecret + random.choice(list('1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ')) #–°–∏–º–≤–æ–ª—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç 

    async with state.proxy() as data:
        data['labelSecret'] = labelSecret

    sumAddCash = sumPay
    summComissiaBD = float('{:.2f}'.format(float(sumAddCash) - (float(sumAddCash) * 0.03))) #–†–ê–°–ß–Å–¢ –ö–û–ú–ò–°–°–ò–ò
    dateNow = str(datetime.now())
    dateNowG = dateNow.partition('.')[0]
    baseMain.execute(f'INSERT INTO USER_PAY (user_id, date, sum_cash, status, secretLabel) VALUES ("{call.from_user.id}", "{dateNowG}", {summComissiaBD}, "WAIT", "{labelSecret}");')
    baseMain.commit()
    
    linkAddCash =  testoplata.pay(labelSecret,sumAddCash)
    markup_inline = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã', url=f'{linkAddCash}')
    popolnenie = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="Start")
    #glavnoe_menu = types.InlineKeyboardButton(text="üîÅ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="CheckOplata")
    markup_inline.add(button).add(popolnenie)

    await call.message.edit_text(f'–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –±–æ—Ç–µ"\n–°—Ç–æ–∏–∏–º–æ—Å—Ç—å: {sumAddCash}—Ä.\n\n‚è≥–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç \n\n–î–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã"', reply_markup=markup_inline)
    loops = asyncio.get_event_loop()
    checkMoneyTake.work = True
    loops.run_until_complete(checkMoneyTake.scheduledOplata(5, call.from_user.id, call.message.message_id)) # –∞–≤—Ç–æ—á–µ–∫ –±–∞–ª–∞–Ω—Å–∞(–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)

        

@dp.callback_query_handler(text_startswith="CheckOplata")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    
    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(glavnoe_menu)

    async with state.proxy() as data:
            labelSecr = data['labelSecret']

    labelSecret = labelSecr
    checkOplata = testoplata.check_pay(labelSecret)
    if checkOplata[0] == "success":
        oldBalance =  baseMain.execute(f'SELECT money FROM USERS WHERE user_id = "{call.from_user.id}"').fetchone()[0]
        balanceToBase = float('{:.2f}'.format(oldBalance + checkOplata[1]))
        baseMain.execute(f'UPDATE USER_PAY SET status="success" WHERE secretLabel="{labelSecret}"')
        baseMain.commit()
        baseMain.execute(f'UPDATE USERS SET money="{balanceToBase}" WHERE user_id="{call.from_user.id}"')
        baseMain.commit()
        await call.message.edit_text(f'‚úÖ–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞\n–£—Å–ª—É–≥–∞ "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –±–æ—Ç–µ" –æ–ø–ª–∞—á–µ–Ω–∞!', reply_markup=markup_inline)
    else:
        await call.message.edit_text(f'‚è≥–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –¥–æ—à–ª–∞ –¥–æ –Ω–∞—Å, –æ–∂–∏–¥–∞–π—Ç–µ', reply_markup=markup_inline)


@dp.callback_query_handler(text_startswith="podecjkaa", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    await call.message.edit_text('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n–ö–∞–∫ –¥–æ–ª–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–æ—Ç –∏ —á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?\n–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –Ω–∞—Ü–µ–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É @botFather. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏ –±—É–¥—É—Ç —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É, –≥–¥–µ –Ω–∞—Ü–µ–Ω–∫–∞ –∏ –±—É–¥–µ—Ç –≤–∞—à–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É –≤ 200%, —É—Å–ª—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏–ª–∞ 1 —Ä—É–±–ª—å, –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 2 —Ä—É–±–ª—è, –≥–¥–µ 1 —Ä—É–±–ª—å –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –≤–∞—à–∏–º –¥–æ—Ö–æ–¥–æ–º.\n\n–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª?\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –∫–æ—à–µ–ª–µ–∫". –£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –≤—ã–≤–æ–¥–∞ 200 —Ä—É–±–ª–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É, YooMoney –∏ Qiwi.\n\n–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤?\n–î–∞, –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è. –ï—ë —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –∫–æ—à–µ–ª–µ–∫" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ.\n\n–ö–∞–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤?\n–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞. –û–±—ã—á–Ω–æ –æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 1 —á–∞—Å–∞ –¥–æ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–≤–æ–¥–∞ –º–æ–≥—É—Ç –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É.\n\n–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Ü–µ–Ω–∫—É –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª—Å–∏—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã:\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @mobot_support', reply_markup=markup_inline)

@dp.callback_query_handler(text_startswith="pravilaa", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    await call.message.edit_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–º MoBot, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å –Ω–∏–∂–µ–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∏–∂–µ–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è, –∏ MoBot –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —É–±—ã—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –Ω–∏–º–∏.\n\n –ú—ã –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ 100% –Ω–∞—à–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –±—É–¥—É—Ç –∏–º–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–ª–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ö–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –≤—Å–µ—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n\n–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º (–æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤), —è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π, –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–∫–ª—é—á–∞—Ç—å –Ω–µ–¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–≤—ã–º–∏, —Ç–µ–º —Å–∞–º—ã–º –æ—Ç–±–∏—Ä–∞—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏.\n\nMoBot –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ú—ã –Ω–µ –¥–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π –Ω–∞ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–æ–±—â–µ. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à—É –ª—É—á—à—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, –æ–¥–Ω–∞–∫–æ, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ—Ü–µ–Ω–∫–∞.\n\n–ú—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –∑–∞ —Ç–æ, —á—Ç–æ –≤–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –∑–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É. –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç(—ã) –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏(—è—Ö), –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ç–æ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫.\n\n–ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π –∏ –Ω–µ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã, –∞ —Å–∞–º —Ñ–∞–∫—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω (–≤ –≤–∏–¥—É —Ç–æ–≥–æ, —á—Ç–æ –±–æ—Ç—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª—É–≥—É). –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å –≤–∞–º —Å—Ä–µ–¥—Å—Ç–≤–∞.\n\n–£—á—Ç–∏—Ç–µ! –ü–æ–ª–∏—Ç–∏–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∂–∏–≤–æ–µ, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ. –ü–æ—ç—Ç–æ–º—É —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –≤—ã—Å—Ç—É–ø–∞—é—Ç –ø—Ä–æ—Ç–∏–≤ –ª—é–±—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Ç —Å–≤–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—è–≤–ª—è—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ. –ü–æ–¥ –∑–∞–ø—Ä–µ—Ç —Ç–∞–∫–∂–µ –ø–æ–ø–∞–¥–∞—é—Ç –∏ —Å–µ—Ä–≤–∏—Å—ã –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã, –¥–ª—è –≤–∞—Å –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∏—Å–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –ü—Ä–∏ —ç—Ç–æ–º –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, –Ω–∏ –∫ —Å–µ—Ä–≤–∏—Å—É, –Ω–∏ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ. \n\n–í–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å MoBot –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª—É–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, –æ–¥–Ω–∞–∫–æ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é –∏ –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. \n\n–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–æ—Ç–µ, –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è, –æ —á—ë–º –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ–±—â–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –∏ –≤—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫–∞–∑—ã. –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —É—Å–ª—É–≥–∏, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å —Å–ø–æ—Ä—ã –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –ª—é–±–æ–π –ø—Ä–∏—á–∏–Ω–µ. –ï—Å–ª–∏ –≤—ã –ø–æ–¥–∞–¥–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å —Å–ø–æ—Ä –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–∫–∞–∑–∞–Ω—ã, –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –±—É–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, –∑–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏–ª–∏ –≥—Ä—É–±–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –º—ã —Ç–∞–∫–∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞.\n\n–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ MoBot —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –º–æ–≥—É—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –ª—é–±—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Ç —Å–≤–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è. –ú—ã –Ω–µ –Ω–µ—Å—ë–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –≤–æ–∑–º–æ–∂–Ω—É—é –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –∑–∞ —Ç–æ, —á—Ç–æ –≤–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞.\n\n", reply_markup=markup_inline)


#–ü–†–û–í–ï–†–ö–ê –û–ü–õ–ê–¢(–ö–û–¢–û–†–´–ï –ë–û–¢ –ù–ï –ó–ê–ú–ï–¢–ò–õ)
async def checkpayError(wait_for):
  while True:
    await asyncio.sleep(wait_for)
    #–ü–†–û–í–ï–†–ö–ê –°–ü–ò–°–ö–ê –û–ü–õ–ê–¢
    print("PAY ERROR STATUS CHECKING...")
    basePays = baseMain.execute(f'SELECT user_id, sum_cash, status, secretLabel, date FROM USER_PAY WHERE status = "WAIT" OR status = "success" AND good_pay_check = "False"').fetchall()  
    for payonce in basePays:
        statusCheck = testoplata.check_pay_test(payonce[3])
        print(payonce[3])
        if statusCheck[0] == "success":
            try:
                
                baseMain.execute(f'UPDATE USER_PAY SET status = "success", good_pay_check = "True" WHERE secretLabel = "{payonce[3]}"')
                baseMain.commit()
                oldBalance =  baseMain.execute(f'SELECT money FROM USERS WHERE user_id = "{payonce[0]}"').fetchone()[0]
                balanceToBase = float('{:.2f}'.format(oldBalance + statusCheck[1]))
                baseMain.execute(f'UPDATE USERS SET money="{balanceToBase}" WHERE user_id="{payonce[0]}"')
                baseMain.commit()

                markup_inlineGood = types.InlineKeyboardMarkup()
                glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
                markup_inlineGood.add(glavnoe_menu)
                await bot.send_message(chat_id=payonce[0], text=f'‚úÖ–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞\n–£—Å–ª—É–≥–∞ "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –±–æ—Ç–µ" –æ–ø–ª–∞—á–µ–Ω–∞!', reply_markup=markup_inlineGood)
            except Exception as errorP:
                print(errorP)


class checkMoneyTake:
    work = True

    #–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–û–í –û–ü–õ–ê–¢–´(–∞–≤—Ç–æ—á–µ–∫)
    async def scheduledOplata(wait_for, user_id, message_id):
        while True:
            while checkMoneyTake.work:
                
                print("PAY STATUS CHECKING...")
                #print(get_data)
                await asyncio.sleep(wait_for)
                timeStarOrder = datetime.now().minute
                timeStopOrder = timeStarOrder + 15
                if timeStopOrder >= 60:
                    timeStopOrder = timeStopOrder - 60
                if timeStarOrder != timeStopOrder:
                    basePay = baseMain.execute(f'SELECT user_id, sum_cash, status, secretLabel, date FROM USER_PAY WHERE user_id = {user_id} AND status = "WAIT"').fetchall()
                    for baseStatus in basePay:
                        dateNow = datetime.today().strftime('%Y-%m-%d')
                        dateNowGood = datetime.strptime(dateNow, '%Y-%m-%d')
                        my_dt = datetime.strptime(baseStatus[4], '%Y-%m-%d %H:%M:%S')
                        my_dtNew = my_dt.strftime('%Y-%m-%d')
                        mydtNewGood = datetime.strptime(my_dtNew, '%Y-%m-%d')
                        if baseStatus[2] == "WAIT" and mydtNewGood < dateNowGood:
                            baseMain.execute(f'DELETE FROM USER_PAY WHERE status = "WAIT"')
                            baseMain.commit()
                        requestOplata = testoplata.check_pay(baseStatus[3])
                        try:
                            if requestOplata[0] == "success":
                                basePay = baseMain.execute(f'UPDATE USER_PAY SET status = "success", good_pay_check = "True" WHERE secretLabel = "{baseStatus[3]}"')
                                baseMain.commit()
                                oldBalance =  baseMain.execute(f'SELECT money FROM USERS WHERE user_id = "{user_id}"').fetchone()[0]
                                balanceToBase = float('{:.2f}'.format(oldBalance + requestOplata[1]))
                                baseMain.execute(f'UPDATE USERS SET money="{balanceToBase}" WHERE user_id="{user_id}"')
                                baseMain.commit()

                                markup_inlineGood = types.InlineKeyboardMarkup()
                                glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
                                markup_inlineGood.add(glavnoe_menu)

                                await bot.edit_message_text(chat_id=user_id, message_id=message_id, text=f'‚úÖ–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞\n–£—Å–ª—É–≥–∞ "–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –≤ –±–æ—Ç–µ" –æ–ø–ª–∞—á–µ–Ω–∞!', reply_markup=markup_inlineGood)
                                #await asyncio.sleep(wait_for * 18000) #–ï–°–õ–ò –°–õ–û–ú–ê–õ–û–°–¨ –û–ñ–ò–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê, –¢–û –í–ö–õ –≠–¢–û
                                return "good"
                        except Exception:
                            #print("error")
                            continue
                else:
                    return "time"
            else:
                return "stop"
    
#keep_alive()
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(checkpayError(600)) # –ø–æ—Å—Ç–∞–≤–∏–º 10 –º–∏–Ω—É—Ç
    executor.start_polling(dp, skip_updates=True)


#2) –°–î–ï–õ–ê–¢–¨ –°–í–û–ô –í–í–û–î –¢–ï–ö–°–¢ –ö–û–ú–ú–ï–ù–¢–ê –í–ö, INST