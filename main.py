#–ò–ú–ü–û–†–¢–´
from aiogram import types, executor, Dispatcher, Bot
import datetime
import sqlite3 as sq
from pathlib import Path
import re
import request
import asyncio
import testoplata
import creator_bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import urlextract
import random
from datetime import datetime
import nest_asyncio
import configparser
import os
import requests
import subprocess
from webserver import keep_alive

# –§–ò–ö–° –†–ê–ë–û–¢–´ –¶–ò–ö–õ–û–í LOOP
#nest_asyncio.apply()

#–ü–û–õ–£–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
def getSettings(filename):
    config = configparser.ConfigParser()
    config.read(filename)
    dataCfg = []
    dataCfg.append(config.get("settings", "BOT_TOKEN"))
    dataCfg.append(config.get("settings", "CASH_BOOST_USER"))
    dataCfg.append(config.get("settings", "DEFAULT_CASH_BOOST"))
    return dataCfg


# –°–û–ó–î–ê–ù–ï –§–ê–ô–õ–ê –ë–î
createbse = Path('telegrammoney.db')
createbse.touch(exist_ok=True)

#–ö–û–ù–ù–ï–ö–¢ –ë–ê–ó–´ –î–ê–ù–ù–´–•
global baseMain, cur
baseMain = sq.connect('telegrammoney.db')
cur = baseMain.cursor()

# –¢–û–ö–ï–ù –ë–û–¢–ê
bot = Bot(token = getSettings('config_main.txt')[0], parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())
botNotification = Bot(token = '5906203663:AAEngC8A1I1R-rKG8ETpmhktPfZM2v6kitY', parse_mode="HTML")
dpNotification = Dispatcher(botNotification, storage=MemoryStorage())

#–ú–ê–ù–ò–®–´ –°–û–°–¢–û–Ø–ù–ò–ô
class InputCountNumber(StatesGroup):
    link_text = State()
    number_count = State()
    sum_cost = State()
    sum_cashout = State()
    data_cashout = State()
    waiting_for_new_percent = State()
    waiting_for_token = State()
    waiting_for_percent = State()

#–°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•
def create_tables():
    baseMain.execute('''CREATE TABLE IF NOT EXISTS USER_ORDER
                    (id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                    id_user INTEGER NOT NULL,
                    date STRING NOT NULL,
                    id_uslygi INTEGER NOT NULL,
                    link_on_group STRING NOT NULL,
                    quantity INTEGER NOT NULL,
                    money DOUBLE NOT NULL,
                    order_number INTEGER NOT NULL,
                    status STRING NOT NULL);''')                           
    baseMain.commit()
    baseMain.execute('''CREATE TABLE IF NOT EXISTS USERS 
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        money DOUBLE NOT NULL DEFAULT 0,
                        earned DOUBLE DEFAULT 0,
                        user_bot STRING,
                        bot_token STRING,
                        cash_up INTEGER);''')
    baseMain.commit()                    
    baseMain.execute('''CREATE TABLE IF NOT EXISTS USER_PAY 
                        (id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER NOT NULL,
                        date STRING NOT NULL,
                        sum_cash DOUBLE NOT NULL,
                        status STRING NOT NULL DEFAULT WAIT,
                        secretLabel STRING NOT NULL DEFAULT 0,
                        good_pay_check STRING DEFAULT False);''')
    baseMain.commit()


def register_user(user_id):
    create_tables()
    user_check_data = baseMain.execute("SELECT user_id FROM USERS WHERE user_id = ?",(str(user_id), )).fetchone()
    if str(user_id) not in str(user_check_data):
        money = 0
        baseMain.execute(f'INSERT INTO USERS (user_id, money) VALUES ("{user_id}", "{money}");')
        baseMain.commit()

def restart_all_bots():
    botsUser = baseMain.execute("SELECT user_bot FROM USERS").fetchall()
    for onceBot in botsUser:
        print(onceBot[0], "started...")
        command = f"cd {onceBot[0]}&&python main.py"
        subprocess.Popen(["start", "/wait", "cmd", "/K", command], shell=True)
restart_all_bots()


#–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ
@dp.message_handler(commands=["start"], state="*")
async def handler(msg: types.Message):
    user_id = msg.from_user.id
    register_user(user_id)
    markup_inline = types.InlineKeyboardMarkup()
    nakrutka = types.InlineKeyboardButton(text="–ù–∞–∫—Ä—É—Ç–∫–∞ üíé", callback_data="nakrutkaaMain")
    test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞üíé", callback_data="create_new_bot")
    balans = types.InlineKeyboardButton(text="–ú–æ–π –∫–æ—à–µ–ª—ë–∫ üíµ", callback_data="balanss")
    infoButton = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infoButton")
    markup_inline.add(nakrutka).add(balans).add(infoButton).add(test_btn_create_bot)

    await msg.answer('üéâ–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫–∫–∞—É–Ω—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ü–µ–Ω–∏—Ç—Å—è –Ω–∞–º–Ω–æ–≥–æ –≤—ã—à–µ –∏ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ.\n\nüî•–°–µ—Ä–≤–∏—Å @botapbot_bot –ø–æ–º–æ–∂–µ—Ç –≤–∞–º  —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –ª–∞–π–∫–æ–≤, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –∑–∞ –≤–∞—Å.\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, @botapbot_bot - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ–≥–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup_inline)


#–ö–ê–õ–ë–ï–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
@dp.callback_query_handler(text_startswith="Start", state="*")
async def start_callback(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    print("current state: ", current_state)

    checkMoneyTake.work = False

    markup_inline = types.InlineKeyboardMarkup()
    test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞üíé", callback_data="create_new_bot")
    nakrutka = types.InlineKeyboardButton(text="–ù–∞–∫—Ä—É—Ç–∫–∞ üíé", callback_data="nakrutkaaMain")
    balans = types.InlineKeyboardButton(text="–ú–æ–π –∫–æ—à–µ–ª—ë–∫ üíµ", callback_data="balanss")
    infoButton = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infoButton")
    markup_inline.add(nakrutka).add(balans).add(infoButton).add(test_btn_create_bot)

    await call.message.edit_text('üéâ–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫–∫–∞—É–Ω—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ü–µ–Ω–∏—Ç—Å—è –Ω–∞–º–Ω–æ–≥–æ –≤—ã—à–µ –∏ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ.\n\nüî•–°–µ—Ä–≤–∏—Å @botapbot_bot –ø–æ–º–æ–∂–µ—Ç –≤–∞–º  —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –ª–∞–π–∫–æ–≤, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –∑–∞ –≤–∞—Å.\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, @botapbot_bot - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ–≥–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup_inline)

#–ö–ê–õ–ë–ï–ö –ö–ù–û–ü–ö–ò "–ù–ê–ö–†–£–¢–ö–ê"
@dp.callback_query_handler(text_startswith="nakrutkaaMain", state="*")
async def nakrutkaaMain(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    if current_state:  
        await state.finish()

    checkMoneyTake.work = False

    markup_inline = types.InlineKeyboardMarkup()
    nakrutka = types.InlineKeyboardButton(text="–ù–∞–∫—Ä—É—Ç–∫–∞ üíé", callback_data="nakrutkaa")
    zakaz = types.InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã üíØ", callback_data="zakazz")
    back_btn = types.InlineKeyboardButton(text="‚ùå–ù–∞–∑–∞–¥", callback_data="Start")
    markup_inline.add(nakrutka).add(zakaz).add(back_btn)

    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_inline)

#–ö–ê–õ–ë–ï–ö –ö–ù–û–ü–ö–ò "–ò–ù–§–û–†–ú–ê–¶–ò–Ø"
@dp.callback_query_handler(text_startswith="infoButton", state="*")
async def infoButton(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    if current_state:  
        await state.finish()

    checkMoneyTake.work = False

    markup_inline = types.InlineKeyboardMarkup()
    nakrutka = types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ü§∑", callback_data="podecjkaa")
    zakaz = types.InlineKeyboardButton(text="–ü—Ä–∞–≤–∏–ª–∞", callback_data="pravilaa")
    back_btn = types.InlineKeyboardButton(text="‚ùå–ù–∞–∑–∞–¥", callback_data="Start")
    markup_inline.add(nakrutka).add(zakaz).add(back_btn)

    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup_inline)


#–ö–ê–õ–ë–ï–ö –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê
@dp.callback_query_handler(text_startswith="create_new_bot")
async def create_new_bot(call: types.CallbackQuery):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    startCreateBot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ üíé", callback_data="startCreateBot")
    bot_settings = types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–π–æ–∫–∏ ‚öôÔ∏è", callback_data="bot_settings")
    bot_instruction = types.InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫–∏—Ü—è üíª", callback_data="bot_instruction")
    back_btn = types.InlineKeyboardButton(text="‚ùå–ù–∞–∑–∞–¥", callback_data="Start")
    markup_inline.add(startCreateBot).add(bot_settings, bot_instruction).add(back_btn)
    await call.message.edit_text("‚û°Ô∏è–í –≤–∞—à–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—Å–µ —É—Å–ª—É–≥–∏ –±—É–¥—É—Ç —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É –Ω–∞—Ü–µ–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º. –í–µ—Å—å –¥–æ—Ö–æ–¥ –æ—Ç —É—Å–ª—É–≥ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ @botapbot_bot, –≥–¥–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤. \n\n–†–∞–±–æ—Ç–∞–π—Ç–µ —Å –Ω–∞—à–∏–º –±–æ—Ç–æ–º –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥!", reply_markup=markup_inline)

@dp.callback_query_handler(text_startswith="bot_instruction")
async def bot_instruction(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton(text="‚ùå–ù–∞–∑–∞–¥", callback_data="delImage")
    markup_inline.add(back_btn)
    
    photo_input = open('create_inst.jpg', 'rb')
    await bot.send_photo(chat_id=call.from_user.id, photo=photo_input, caption="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –≥–¥–µ –Ω–∞–π—Ç–∏ API –∫–ª—é—á —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞", reply_markup= markup_inline)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    async with state.proxy() as data:
        data['callMessageIDdel'] = call.message.message_id

@dp.callback_query_handler(text_startswith="delImage")
async def delImage(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    data_state = await state.get_data()
    dellId = data_state['callMessageIDdel']
    await bot.delete_message(chat_id=call.from_user.id, message_id=dellId + 1)
    await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    nakrutka = types.InlineKeyboardButton(text="–ù–∞–∫—Ä—É—Ç–∫–∞ üíé", callback_data="nakrutkaaMain")
    test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞üíé", callback_data="create_new_bot")
    balans = types.InlineKeyboardButton(text="–ú–æ–π –∫–æ—à–µ–ª—ë–∫ üíµ", callback_data="balanss")
    infoButton = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infoButton")
    markup_inline.add(nakrutka).add(balans).add(infoButton).add(test_btn_create_bot)

    await call.message.answer('üéâ–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∞–∫–∫–∞—É–Ω—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ü–µ–Ω–∏—Ç—Å—è –Ω–∞–º–Ω–æ–≥–æ –≤—ã—à–µ –∏ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–∞–º–Ω–æ–≥–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ.\n\nüî•–°–µ—Ä–≤–∏—Å @botapbot_bot –ø–æ–º–æ–∂–µ—Ç –≤–∞–º  —ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è: –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –ª–∞–π–∫–æ–≤, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º—ã —Å–¥–µ–ª–∞–µ–º –∑–∞ –≤–∞—Å.\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, @botapbot_bot - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –≤—Å–µ–≥–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup_inline)



@dp.callback_query_handler(text_startswith="bot_settings")
async def bot_settings(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    btn_procent_50 = types.InlineKeyboardButton('5%', callback_data='5p')
    btn_procent_75 = types.InlineKeyboardButton('10%', callback_data='10p')
    btn_procent_100 = types.InlineKeyboardButton('15%', callback_data='15p')
    btn_procent_125 = types.InlineKeyboardButton('20%', callback_data='20p')
    markup_inline.add(btn_procent_50, btn_procent_75, btn_procent_100, btn_procent_125).add(back_btn)

    bot_token = baseMain.execute(f'SELECT bot_token FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    url = f"https://api.telegram.org/bot{bot_token}/getMe"

    headers = {
        "accept": "application/json",
        "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
    }

    response = requests.post(url, headers=headers)
    data = response.json()
    responseOrder = data['result']
    responseOrder1 = responseOrder['username']
    anwerLink = "@" + f"{responseOrder1}"
    cash_up = baseMain.execute(f'SELECT cash_up FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    await call.message.edit_text(f"‚úÖ–í–∞—à –±–æ—Ç: {anwerLink}\nüíé–ù–∞—Ü–µ–Ω–∫–∞: {cash_up}%\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Ü–µ–Ω–∫—É: ", reply_markup=markup_inline)
    chekOptionsEdit.worksettings = False
    await InputCountNumber.waiting_for_percent.set()
                                                                    

#–ö–ê–õ–ë–ï–ö –ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê
@dp.callback_query_handler(text_startswith="startCreateBot")
async def startCreateBot(call: types.CallbackQuery):
    await call.answer()
    check_bots_limit = baseMain.execute(f'SELECT bot_token FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    if len(str(check_bots_limit)) != 46:
        markup_inline = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        btn_procent_50 = types.InlineKeyboardButton('5%', callback_data='5p')
        btn_procent_75 = types.InlineKeyboardButton('10%', callback_data='10p')
        btn_procent_100 = types.InlineKeyboardButton('15%', callback_data='15p')
        btn_procent_125 = types.InlineKeyboardButton('20%', callback_data='20p')
        markup_inline.add(btn_procent_50, btn_procent_75, btn_procent_100, btn_procent_125).add(back_btn)
        await call.message.edit_text("üíé–í—ã–±–µ—Ä–µ—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏:", reply_markup=markup_inline)
        chekOptionsEdit.worksettings = True
        await InputCountNumber.waiting_for_percent.set()
    else:
        url = f"https://api.telegram.org/bot{check_bots_limit}/getMe"

        headers = {
            "accept": "application/json",
            "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
        }

        response = requests.post(url, headers=headers)
        data = response.json()
        responseOrder = data['result']
        responseOrder1 = responseOrder['username']
        anwerLink = "@" + f"{responseOrder1}"
        cash_up = baseMain.execute(f'SELECT cash_up FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
        markup_inline = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        btn_procent_50 = types.InlineKeyboardButton('5%', callback_data='5p')
        btn_procent_75 = types.InlineKeyboardButton('10%', callback_data='10p')
        btn_procent_100 = types.InlineKeyboardButton('15%', callback_data='15p')
        btn_procent_125 = types.InlineKeyboardButton('20%', callback_data='20p')
        markup_inline.add(btn_procent_50, btn_procent_75, btn_procent_100, btn_procent_125).add(back_btn)
        await call.message.edit_text(f"‚ùå–û—à–∏–±–∫–∞! –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –±–æ—Ç\n–í–∞—à –±–æ—Ç: {anwerLink}\nüíé–ù–∞—Ü–µ–Ω–∫–∞: {cash_up}%\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Ü–µ–Ω–∫—É: ", reply_markup=markup_inline)
        await InputCountNumber.waiting_for_percent.set()

class chekOptionsEdit:
    worksettings = True
    #–ú–ê–®–ò–ù–ê –û–ñ–ò–î–ê–ù–ò–Ø –ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê(–ü–†–û–¶–ï–ù–¢–´)
    @dp.callback_query_handler(lambda c: c.data in ['5p', '10p', '15p', '20p'], state=InputCountNumber.waiting_for_percent)
    async def process_percent_choice(query: types.CallbackQuery, state: FSMContext):
        while chekOptionsEdit.worksettings:
            percent = query.data[:-1]
            await state.update_data(percent=percent)
            message = query.message
            
            await bot.delete_message(chat_id=query.message.chat.id, message_id=query.message.message_id)
            await query.message.edit_text('üü†API –∫–ª—é—á –±–æ—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ @botfather):')

            async with state.proxy() as data:
                data['callMessageID'] = query.message.message_id
            await InputCountNumber.waiting_for_token.set()
        else:
            percent = query.data[:-1]
            await state.update_data(percent=percent)
            baseMain.execute(f'UPDATE USERS SET cash_up = {percent} WHERE user_id="{query.from_user.id}"')
            baseMain.commit()
            markup_inline = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
            btn_procent_50 = types.InlineKeyboardButton('5%', callback_data='5p')
            btn_procent_75 = types.InlineKeyboardButton('10%', callback_data='10p')
            btn_procent_100 = types.InlineKeyboardButton('15%', callback_data='15p')
            btn_procent_125 = types.InlineKeyboardButton('20%', callback_data='20p')
            markup_inline.add(btn_procent_50, btn_procent_75, btn_procent_100, btn_procent_125).add(back_btn)
            bot_token = baseMain.execute(f'SELECT bot_token FROM USERS WHERE user_id = {query.from_user.id}').fetchone()[0]
            url = f"https://api.telegram.org/bot{bot_token}/getMe"

            headers = {
                "accept": "application/json",
                "User-Agent": "Telegram Bot SDK - (https://github.com/irazasyed/telegram-bot-sdk)"
            }

            response = requests.post(url, headers=headers)
            data = response.json()
            responseOrder = data['result']
            responseOrder1 = responseOrder['username']
            anwerLink = "@" + f"{responseOrder1}"
            cash_up = baseMain.execute(f'SELECT cash_up FROM USERS WHERE user_id = {query.from_user.id}').fetchone()[0]
            directory = baseMain.execute(f'SELECT user_bot FROM USERS WHERE user_id = {query.from_user.id}').fetchone()[0]
            await creator_bot.changeSettings(directory, cash_up)
            await query.message.edit_text(f"‚úÖ–í–∞—à –±–æ—Ç: {anwerLink}\nüíé–ù–∞—Ü–µ–Ω–∫–∞: {cash_up}%\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –Ω–∞—Ü–µ–Ω–∫—É: ", reply_markup=markup_inline)
            await state.finish()
            chekOptionsEdit.worksettings = False
            await InputCountNumber.waiting_for_percent.set()

    

#–ú–ê–®–ò–ù–ê –û–ñ–ò–î–ê–ù–ò–Ø –ù–ê–ß–ê–õ–ê –°–û–ó–î–ê–ù–ò–Ø –ù–û–í–û–ì–û –ë–û–¢–ê(–¢–û–ö–ï–ù)
@dp.message_handler(state=InputCountNumber.waiting_for_token)
async def process_new_bot(message: types.Message, state: FSMContext):
    data = await state.get_data()
    percent = data.get('percent')
    callMessageID = data.get("callMessageID")
    async with state.proxy() as proxy:
        proxy['messagesend'] = message.text 
    if proxy["messagesend"] != "" and proxy["messagesend"] != "/start":
        
        bot_token = message.text
        if len(bot_token) != 46:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=callMessageID, text="‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–æ–π 46 —Å–∏–º–≤–æ–ª–æ–≤.")
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
            await InputCountNumber.waiting_for_token.set()

        else:
            await bot.delete_message(message.chat.id, message.message_id)
            bot_name = f"{message.from_user.id}" + "_bot"
            try:
                baseMain.execute(f'UPDATE USERS SET user_bot= "{bot_name}", bot_token = "{bot_token}", cash_up = {percent} WHERE user_id="{message.from_user.id}"')
                baseMain.commit()
            except Exception as eroor:
                print(eroor)
            answer_good = await creator_bot.create_folder(percent, bot_token, bot_name)
            markup_inline = types.InlineKeyboardMarkup()
            test_btn_create_bot = types.InlineKeyboardButton(text="–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞üíé", callback_data="create_new_bot")
            nakrutka = types.InlineKeyboardButton(text="–ù–∞–∫—Ä—É—Ç–∫–∞ üíé", callback_data="nakrutkaaMain")
            balans = types.InlineKeyboardButton(text="–ú–æ–π –∫–æ—à–µ–ª—ë–∫ üíµ", callback_data="balanss")
            infoButton = types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="infoButton")
            markup_inline.add(nakrutka).add(balans).add(infoButton).add(test_btn_create_bot)
            try:
                await bot.delete_message(message.chat.id, callMessageID + 1)
                await bot.send_message(chat_id=message.from_user.id, text=f'‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞: {answer_good}, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –ø–æ–¥ –≤–∞—à—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É.\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É –¥–ª—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ–∑–¥–∞–π —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ - –ù–∞—Å—Ç—Ä–æ–π–∫–∏".', reply_markup=markup_inline)
            except Exception as e:
                print(e)
            await state.finish()
    else:
        await state.finish()

#–ú–ï–ù–Æ –ù–ê–ö–†–£–¢–û–ö
@dp.callback_query_handler(text_startswith="nakrutkaa", state="*")
async def prev_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    telegram = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º", callback_data="servicetg")
    vkontakte = types.InlineKeyboardButton(text="–í–ö–æ–Ω—Ç–∞–∫—Ç–µ", callback_data="servicevk")
    insta = types.InlineKeyboardButton(text="Instagram", callback_data="serviceinst")
    youtube = types.InlineKeyboardButton(text="Youtube", callback_data="serviceyt")
    tiktok = types.InlineKeyboardButton(text="TikTok", callback_data="servicett")
    twitter = types.InlineKeyboardButton(text="Twitter", callback_data="servicetwt")
    likee = types.InlineKeyboardButton(text="Likee", callback_data="servicelk")
    odnoklassniki = types.InlineKeyboardButton(text="–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏", callback_data="serviceok")
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(telegram, vkontakte).add(insta, youtube).add(tiktok, odnoklassniki).add(twitter, likee).add(glavnoe_menu)

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å–µ—Ç—å:", reply_markup=markup_inline)

@dp.callback_query_handler(text_startswith="zakazz", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    markup.add(glavnoe_menu)

    listOrders = baseMain.execute(f'SELECT order_number, id_uslygi, date, link_on_group, status  FROM USER_ORDER WHERE id_user = {call.from_user.id}').fetchall()
    resultPrint = []
    try:
        for i in listOrders:
            b = f'{i[0]} | {i[2]} | {i[3]} | {i[4]}::'
            resultPrint.append(b)
            removeA = str(resultPrint).replace('::', '\n')
            removeB = str(removeA).replace("['", '')
            removeC = str(removeB).replace("']", '')
            removeD = str(removeC).replace("', '", '')
        await call.message.edit_text(f'‚¨áÔ∏è–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ‚¨áÔ∏è \n\n{removeD}', reply_markup=markup, disable_web_page_preview=True)
    except:
        await call.message.edit_text(f'‚¨áÔ∏è–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ‚¨áÔ∏è \n\n–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤', reply_markup=markup, disable_web_page_preview=True)
            

#–ö–ê–õ–ë–ï–ö –ö–ù–û–ü–ö–ò "–ö–û–®–ï–õ–ï–ö"
@dp.callback_query_handler(text_startswith="balanss", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    oplataa = types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="sendMoney")
    cash_out = types.InlineKeyboardButton(text="–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="cashOutMoney")
    glavnoe_menu = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="Start")
    markup_inline.add(oplataa, cash_out).add(glavnoe_menu)
    moneyAccount = float('{:.2f}'.format(baseMain.execute(f'SELECT money FROM USERS WHERE user_id = {int(call.from_user.id)}').fetchone()[0]))
    moneyAccountEarned = float('{:.2f}'.format(baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {int(call.from_user.id)}').fetchone()[0]))
    await call.message.edit_text(f"–ë–∞–ª–∞–Ω—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥: {moneyAccount}—Ä.\n–ë–∞–ª–∞–Ω—Å –Ω–∞ –≤—ã–≤–æ–¥: {moneyAccountEarned}—Ä.", reply_markup=markup_inline)

#–°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –í–´–í–û–î –°–†–ï–î–°–¢–í
@dp.callback_query_handler(text_startswith="cashOutMoney", state="*")
async def admin_menu(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    moneyCard = types.InlineKeyboardButton(text="üí≥–ù–∞ –∫–∞—Ä—Ç—É", callback_data="cashOutCard")
    moneyQiwi = types.InlineKeyboardButton(text="ü•ù–ù–∞ Qiwi", callback_data="cashOutQiwi")
    moneyYoomoney = types.InlineKeyboardButton(text="üí∞–ù–∞ –Æ–º–∞–Ω–∏", callback_data="cashOutYoomoney")
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(moneyCard, moneyQiwi).add(moneyYoomoney).add(glavnoe_menu)

    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]

    moneyCard = float('{:.2f}'.format(float(moneyCashOut) - ((float(moneyCashOut)*0.03) + 45)))
    moneyQiwi = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.03)))
    moneyYoomoney = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.005)))
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyCashOut}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\n–° –∫–æ–º–∏—Å—Å–∏–µ–π:\nüí≥–ù–∞ –∫–∞—Ä—Ç—É: {moneyCard}—Ä.\nü•ù–ù–∞ Qiwi: {moneyQiwi}—Ä.\nüí∞–ù–∞ –Æ–º–∞–Ω–∏: {moneyYoomoney}—Ä.', reply_markup=markup_inline)

#–í–´–í–û–î –ù–ê –ö–ê–†–¢–£
@dp.callback_query_handler(text_startswith="cashOutCard", state="*")
async def cashOutCard(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    moneyCard = float('{:.2f}'.format(float(moneyCashOut) - ((float(moneyCashOut)*0.03) + 45)))

    async with state.proxy() as data:
        data['callMessageID'] = call.message.message_id
        data['type_cash'] = "–ù–∞ –∫–∞—Ä—Ç—É"
        data['moneyCard'] = moneyCard
    #global_dict(call.message.message_id, "–ù–∞ –∫–∞—Ä—Ç—É", moneyCard, "add")
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyCard}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫ –≤—ã–≤–æ–¥—É: ', reply_markup=markup_inline)
    await InputCountNumber.sum_cashout.set()

#–í–´–í–û–î –ù–ê –ö–ò–í–ò
@dp.callback_query_handler(text_startswith="cashOutQiwi", state="*")
async def cashOutCard(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    moneyQiwi = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.03)))

    async with state.proxy() as data:
        data['callMessageID'] = call.message.message_id
        data['type_cash'] = "–ù–∞ Qiwi"
        data['moneyCard'] = moneyQiwi
    #global_dict(call.message.message_id, "–ù–∞ Qiwi", moneyQiwi, "add")
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyQiwi}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫ –≤—ã–≤–æ–¥—É: ', reply_markup=markup_inline)
    await InputCountNumber.sum_cashout.set()

#–í–´–í–û–î –ù–ê –Æ–ú–ê–ù–ò
@dp.callback_query_handler(text_startswith="cashOutYoomoney", state="*")
async def cashOutCard(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    moneyCashOut = baseMain.execute(f'SELECT earned FROM USERS WHERE user_id = {call.from_user.id}').fetchone()[0]
    moneyYoomoney = float('{:.2f}'.format(float(moneyCashOut) - (float(moneyCashOut)*0.005)))

    async with state.proxy() as data:
        data['callMessageID'] = call.message.message_id
        data['type_cash'] = "–ù–∞ –Æ–º–∞–Ω–∏"
        data['moneyCard'] = moneyYoomoney
    #global_dict(call.message.message_id, "–ù–∞ –Æ–º–∞–Ω–∏", moneyYoomoney, "add")
    await call.message.edit_text(f'‚úÖ–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {moneyYoomoney}—Ä. \n\n‚ÄºÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –æ—Ç 200—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫ –≤—ã–≤–æ–¥—É: ', reply_markup=markup_inline)
    await InputCountNumber.sum_cashout.set()

#–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –í–´–ü–õ–ê–¢–´ –í–û–†–ö–ï–†–£(–°—É–º–º–∞)
@dp.message_handler(state=InputCountNumber.sum_cashout) 
async def naviga(message: types.Message, state: FSMContext):
    data_state = await state.get_data()
    callMessageID = data_state.get("callMessageID")
    type_cash = data_state.get("type_cash")
    moneyCard = data_state.get("moneyCard")
    print(data_state)
    #await state.finish()
    async with state.proxy() as proxy:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        proxy['messagesendCash'] = message.text
    if proxy["messagesendCash"] != "/start" and proxy["messagesendCash"] != "":
        markup_inline = types.InlineKeyboardMarkup()
        markup_inlineError = types.InlineKeyboardMarkup()
        glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        markup_inline.add(glavnoe_menu)
        markup_inlineError.add(glavnoe_menu)
        answerCount = message.text
        messageID = callMessageID

        if float(answerCount) >= 200 and answerCount != "" and float(answerCount) <= float(moneyCard):
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üü¢–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {answerCount}—Ä.\n\n–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:', reply_markup=markup_inline)
            #global_dict("", answerCount, "", "add")
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount
            await InputCountNumber.data_cashout.set() 
        else:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üî¥–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {answerCount}—Ä.\n\nüîº–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {moneyCard}—Ä.\nüîΩ–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã: 200—Ä. \n\n‚ÄºÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', reply_markup=markup_inlineError)
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount
            await InputCountNumber.sum_cashout.set()

        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await state.finish()

#–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–ô –í–´–ü–õ–ê–¢–´ –í–û–†–ö–ï–†–£(—Ä–µ–∫–≤–µ–∑–∏—Ç—ã)
@dp.message_handler(state=InputCountNumber.data_cashout) 
async def naviga(message: types.Message, state: FSMContext):
    data_state = await state.get_data()
    callMessageID = data_state.get("callMessageID")
    type_cash = data_state.get("type_cash")
    moneyCard = data_state.get("moneyCard")
    answerCount_summ = data_state.get("answerCount")
    print(data_state)

    async with state.proxy() as proxy:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        proxy['messagesendCash'] = message.text
    if proxy["messagesendCash"] != "/start" and proxy["messagesendCash"] != "":
        markup_inline = types.InlineKeyboardMarkup()
        markup_inlineError = types.InlineKeyboardMarkup()
        oplataGenOrder = types.InlineKeyboardButton(text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="startRequestCashOut")
        glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
        markup_inline.add(oplataGenOrder).add(glavnoe_menu)
        markup_inlineError.add(glavnoe_menu)
        answerCount = message.text
        messageID = callMessageID

        if  answerCount != "" and answerCount != " ":
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üü¢–°—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {answerCount_summ}—Ä.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã –≤—ã–ø–ª–∞—Ç—ã: {answerCount}\n\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüîΩ', reply_markup=markup_inline)
            #global_dict("", answerCount, "", "add")
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount_summ
                data['answerCount_1'] = answerCount    
        else:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'‚ÄºÔ∏è–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', reply_markup=markup_inlineError)
            await state.finish()
            async with state.proxy() as data:
                data['callMessageID'] = callMessageID
                data['type_cash'] = type_cash
                data['moneyCard'] = moneyCard
                data['answerCount'] = answerCount_summ
                data['answerCount_1'] = answerCount    
            await InputCountNumber.data_cashout.set()

        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await state.finish()

#–ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –í–´–ü–õ–ê–¢–´
@dp.callback_query_handler(text_startswith="startRequestCashOut", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    #callMessageID = data_state.get("callMessageID")
    type_cash = data_state.get("type_cash")
    moneyCard = data_state.get("moneyCard")
    answerCount_summ = data_state.get("answerCount")
    answerCount_requez = data_state.get("answerCount_1")
    print(data_state)
    await call.answer()
    await state.finish()
    current_state = await state.get_state()
    print("pay request finish state: ", current_state)


    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
    markup.add(glavnoe_menu)
    

    lastBalance = float('{:.2f}'.format(float(moneyCard) - float(answerCount_summ)))
    baseMain.execute(f'UPDATE USERS SET earned = {float(lastBalance)} WHERE user_id = "{call.from_user.id}"')
    baseMain.commit()
    await botNotification.send_message('407073449', f'‚úÖ–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É\n–°—É–º–º–∞: {answerCount_summ}—Ä.\n–°–ø–æ—Å–æ–± –≤—ã–ø–ª–∞—Ç—ã: {type_cash}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {answerCount_requez}\n–í–æ—Ä–∫–µ—Ä: {call.from_user.id}')
    await call.message.edit_text(f'‚úÖ–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ\n\n–°—É–º–º–∞: {answerCount_summ}—Ä.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {answerCount_requez}', reply_markup=markup)
    baseMain.execute(f'DELETE FROM USER_ORDER WHERE status = "–í—ã–ø–æ–ª–Ω–µ–Ω‚úÖ"')
    baseMain.commit()

#–í–´–ë–û–† –°–ò–°–¢–ï–ú–´ –û–ü–õ–ê–¢–´
@dp.callback_query_handler(text_startswith="sendMoney", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
    
    markup_inline = types.InlineKeyboardMarkup()
    popolnenie = types.InlineKeyboardButton(text="–Æ–º–∞–Ω–∏", callback_data="uMoneyCash")
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(popolnenie).add(glavnoe_menu)

    moneyAccount = float('{:.2f}'.format(baseMain.execute(f'SELECT money FROM USERS WHERE user_id = {int(call.from_user.id)}').fetchone()[0]))
    await call.message.edit_text(f'–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {moneyAccount}—Ä.', reply_markup=markup_inline)

#–ü–õ–ê–¢–ï–ì–ê –Æ–ú–ê–ù–ò
@dp.callback_query_handler(text_startswith="uMoneyCash", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    
    async with state.proxy() as data:
        data['message_id_user'] = call.message.message_id
    #global_dict(call.message.message_id, "", "", "add")
    await call.message.edit_text('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é: \n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç 2—Ä.', reply_markup=markup_inline)
    await InputCountNumber.sum_cost.set()
    

#–ú–ê–®–ò–ù–ê –°–û–°–¢–û–Ø–ù–ò–Ø (–°–£–ú–ú–ê –û–ü–õ–ê–¢–´)
@dp.message_handler(state=InputCountNumber.sum_cost) 
async def naviga(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
            messageID_state = data['message_id_user']   
    async with state.proxy() as proxy:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        proxy['messagesendCash'] = message.text
    if proxy["messagesendCash"] != "/start" and proxy["messagesendCash"] != "":
        markup_inline = types.InlineKeyboardMarkup()
        oplataGenOrder = types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="startRequestOplata")
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(oplataGenOrder).add(glavnoe_menu)

        markup_inlineerr = types.InlineKeyboardMarkup()
        oplataGenOrder = types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="startRequestOplata")
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inlineerr.add(glavnoe_menu)
        answerCount = message.text
        messageID = messageID_state

        if int(answerCount) >= 2 and answerCount != "":
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üü¢–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {answerCount}—Ä. \n \nüü†–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 2—Ä.', reply_markup=markup_inline)
            #global_dict("", answerCount, "", "add")
            await state.finish()
            async with state.proxy() as data:
                data['answer_summPay'] = answerCount  
        else:
            await bot.delete_message(message.chat.id, message.message_id)
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üî¥–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {answerCount}—Ä.\n \n‚ÄºÔ∏è–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è \n \nüü†–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 2—Ä.', reply_markup=markup_inlineerr)
            await state.finish()
            await InputCountNumber.sum_cost.set()

        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await state.finish()
        


@dp.callback_query_handler(text_startswith="startRequestOplata", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()

    async with state.proxy() as data:
        async with state.proxy() as data:
            sumPay = data['answer_summPay']

    labelSecret = ""
    for x in range(16): #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (16)
        labelSecret = labelSecret + random.choice(list('1234567890abcdefghigklmnopqrstuvyxwzABCDEFGHIGKLMNOPQRSTUVYXWZ')) #–°–∏–º–≤–æ–ª—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç 

    async with state.proxy() as data:
        data['labelSecret'] = labelSecret

    #global_dict("", "",labelSecret , "add")
    sumAddCash = sumPay
    summComissiaBD = float('{:.2f}'.format(float(sumAddCash) - (float(sumAddCash) * 0.03))) #–†–ê–°–ß–Å–¢ –ö–û–ú–ò–°–°–ò–ò
    dateNow = str(datetime.now())
    dateNowG = dateNow.partition('.')[0]
    baseMain.execute(f'INSERT INTO USER_PAY (user_id, date, sum_cash, status, secretLabel) VALUES ("{call.from_user.id}", "{dateNowG}", {summComissiaBD}, "WAIT", "{labelSecret}");')
    baseMain.commit()
    
    linkAddCash =  testoplata.pay(labelSecret,sumAddCash)
    markup_inline = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã', url=f'{linkAddCash}')
    popolnenie = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="Start")
    #glavnoe_menu = types.InlineKeyboardButton(text="üîÅ–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="CheckOplata")
    markup_inline.add(button).add(popolnenie)

    await call.message.edit_text(f'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞: {sumAddCash}—Ä.\n\n–° —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å–∏–∏: {summComissiaBD}—Ä.\n\n‚è≥–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É: 15 –º–∏–Ω—É—Ç \n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã"', reply_markup=markup_inline)
    loops = asyncio.get_event_loop()
    checkMoneyTake.work = True
    loops.run_until_complete(checkMoneyTake.scheduledOplata(5, call.from_user.id, call.message.message_id)) # –∞–≤—Ç–æ—á–µ–∫ –±–∞–ª–∞–Ω—Å–∞(–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ)

        

@dp.callback_query_handler(text_startswith="CheckOplata")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    
    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(glavnoe_menu)

    async with state.proxy() as data:
            labelSecr = data['labelSecret']

    labelSecret = labelSecr
    checkOplata = testoplata.check_pay(labelSecret)
    if checkOplata[0] == "success":
        oldBalance =  baseMain.execute(f'SELECT money FROM USERS WHERE user_id = "{call.from_user.id}"').fetchone()[0]
        balanceToBase = float('{:.2f}'.format(oldBalance + checkOplata[1]))
        baseMain.execute(f'UPDATE USER_PAY SET status="success" WHERE secretLabel="{labelSecret}"')
        baseMain.commit()
        baseMain.execute(f'UPDATE USERS SET money="{balanceToBase}" WHERE user_id="{call.from_user.id}"')
        baseMain.commit()
        await call.message.edit_text(f'‚úÖ–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {checkOplata[1]}—Ä.', reply_markup=markup_inline)
    else:
        await call.message.edit_text(f'‚è≥–û–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –¥–æ—à–ª–∞ –¥–æ –Ω–∞—Å, –æ–∂–∏–¥–∞–π—Ç–µ', reply_markup=markup_inline)


#–ó–ê–í–ï–†–®–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê –£–°–õ–£–ì–ò
@dp.callback_query_handler(text_startswith="completeOrders", state="*")
async def completeOrder(call: types.CallbackQuery, state: FSMContext):

    data_state = await state.get_data()
    link_usr = data_state.get("answer")
    answerCount = data_state.get("answerCount")
    orderCost = data_state.get("orderCost")
    service_id = data_state.get("dictionary[0]")
    print(data_state)
    await call.answer()
    await state.finish()

    current_state = await state.get_state()
    print("state: ",current_state)

    markup_inlineNoBalance = types.InlineKeyboardMarkup()
    popolnenie = types.InlineKeyboardButton(text="‚úÖ–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="sendMoney") # –¢–£–¢ –ù–£–ñ–ù–û –¢–ï–ú–ö–£ –°–î–ï–õ–ê–¢–¨
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="Start")
    markup_inlineNoBalance.add(popolnenie).add(glavnoe_menu)

    markup_inlineErrorServ = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
    markup_inlineErrorServ.add(glavnoe_menu)

    markup_inlineGood = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
    markup_inlineGood.add(glavnoe_menu)

    dateNow = str(datetime.now())
    dateNowG = dateNow.partition('.')[0]
    userMoney = baseMain.execute(f'SELECT money FROM USERS WHERE user_id = "{call.from_user.id}"').fetchone()[0]
    print(userMoney, orderCost)
    #print("–ë–ê–õ–ê–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ", get_data)
    if float(userMoney) >= float(orderCost):
        try:
            moneyAfter = float('{:.2f}'.format(float(userMoney) - float(orderCost)))
            baseMain.execute(f'UPDATE USERS SET money="{moneyAfter}" WHERE user_id="{call.from_user.id}"')
            baseMain.commit()

            answerCreateOrder = request.createOrder("add", service_id, link_usr, answerCount)
            baseMain.execute(f'INSERT INTO USER_ORDER (id_user, date, id_uslygi, link_on_group, quantity, money, order_number, status) VALUES ("{call.from_user.id}", "{str(dateNowG)}", "{service_id}", "{link_usr}", "{answerCount}", "{orderCost}", "{answerCreateOrder}", "‚úÖ–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ");')
            baseMain.commit()

            await call.message.edit_text(f'‚úÖ–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!\n\n–°—ã–ª–∫–∞: "{service_id}"\n‚û°Ô∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: "{answerCount}"\n‚û°Ô∏è–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ‚úÖ–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n\nüéâ–ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞!', reply_markup=markup_inlineGood, disable_web_page_preview=True) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã 
        except sq.Error as e:
            print("Failure: ", e)
            moneyBack = float('{:.2f}'.format(float(userMoney) + float(orderCost)))
            baseMain.execute(f'UPDATE USERS SET money="{moneyBack}" WHERE user_id="{call.from_user.id}"')
            baseMain.commit()
            await call.message.edit_text(f'‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞\n\n‚û°Ô∏è–ë–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â—ë–Ω: +{orderCost}—Ä.', reply_markup=markup_inlineErrorServ) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã 
    else:
        await call.message.edit_text(f'‚ùå–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ \n\n–í–∞—à –±–∞–ª–∞–Ω—Å: "{userMoney}"\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: "{orderCost}"', reply_markup=markup_inlineNoBalance) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã



@dp.callback_query_handler(text_startswith="podecjkaa", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    await call.message.edit_text('–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–µ–º—ã–µ  –≤–æ–ø—Ä–æ—Å—ã:\n\n–ö–∞–∫ –¥–æ–ª–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –±–æ—Ç –∏ —á—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Ü–µ–Ω–∫–∞?\n–°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –Ω–∞—Ü–µ–Ω–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É @botFather. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏ –±—É–¥—É—Ç —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à—É –≤—ã–±—Ä–∞–Ω–Ω—É—é –Ω–∞—Ü–µ–Ω–∫—É, –≥–¥–µ –Ω–∞—Ü–µ–Ω–∫–∞ –∏ –±—É–¥–µ—Ç –≤–∞—à–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Ü–µ–Ω–∫—É –≤ 200%, —É—Å–ª—É–≥–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–æ–∏–ª–∞ 1 —Ä—É–±–ª—å, –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 2 —Ä—É–±–ª—è, –≥–¥–µ 1 —Ä—É–±–ª—å –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –≤–∞—à–∏–º –¥–æ—Ö–æ–¥–æ–º.\n\n–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å–∫–æ–ª—å–∫–æ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª?\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –∫–æ—à–µ–ª–µ–∫". –£—á—Ç–∏—Ç–µ, —á—Ç–æ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –≤—ã–≤–æ–¥–∞ 200 —Ä—É–±–ª–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É, YooMoney –∏ Qiwi.\n\n–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤?\n–î–∞, –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è. –ï—ë —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –∫–æ—à–µ–ª–µ–∫" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ.\n\n–ö–∞–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤?\n–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞. –û–±—ã—á–Ω–æ –æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç 1 —á–∞—Å–∞ –¥–æ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–≤–æ–¥–∞ –º–æ–≥—É—Ç –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É.\n\n–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏?\n–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Ü–µ–Ω–∫—É –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª—Å–∏—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:\n@bk169\n@delowerCL', reply_markup=markup_inline)

@dp.callback_query_handler(text_startswith="pravilaa", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()
    markup_inline = types.InlineKeyboardMarkup()
    glavnoe_menu = types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="Start")
    markup_inline.add(glavnoe_menu)
    await call.message.edit_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–º - SMM —Å–µ—Ä–≤–∏—Å–æ–º, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–∏–µ —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω—ã —Å –Ω–∏–∂–µ–ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è,"
                                 " –∏ SMM —Å–µ—Ä–≤–∏—Å –Ω–µ –±—É–¥–µ—Ç –Ω–µ—Å—Ç–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ —É–±—ã—Ç–∫–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —á–∏—Ç–∞–ª–∏ –Ω–∏–∂–µ–ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
                                 "\n""SMM —Å–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Instagram / –í–ö–æ–Ω—Ç–∞–∫—Ç–µ / Telegram / Twitter / TikTok / YouTube –∏–ª–∏ –≤ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è ¬´–≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞¬ª –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. "
                                 "\n""–ú—ã –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤–∞—à–∏ –Ω–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –±—É–¥—É—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –≤–∞–º–∏, –º—ã –ø—Ä–æ—Å—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –ø–ª–∞—Ç–∏—Ç–µ. "
                                 "\n""–ú—ã –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ 100% –Ω–∞—à–∏—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –±—É–¥—É—Ç –∏–º–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –ø–æ–ª–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ö–æ—Ç—è –º—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è –≤—Å–µ—Ö —É—á–µ—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π."
                                 "\n""–¢–æ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ–± —É—Å–ª—É–≥–∞—Ö (–æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤) - —è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π, –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –∏—Å–∫–ª—é—á–∞—Ç—å –Ω–µ–¥–æ–±—Ä–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤,"
                                 " –∏ —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–≤—ã–º–∏, —Ç–µ–º —Å–∞–º—ã–º –æ—Ç–±–∏—Ä–∞—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —Å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏. "
                                 "\n""–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ / –Ω–∞–∫—Ä—É—Ç–∫—É –ª—é–±–æ–π –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª, –≤–∫–ª—é—á–∞—è –æ–±–Ω–∞–∂–µ–Ω–Ω—ã–µ —Ç–µ–ª–∞ –∏–ª–∏ –ª—é–±—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏–ª–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Instagram / –í–ö–æ–Ω—Ç–∞–∫—Ç–µ / Telegram / Twitter / YouTube –∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π"
                                 "\n""SMM –±–æ—Ç –ù–ï –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤. –ú—ã –Ω–µ –¥–∞–µ–º –Ω–∏–∫–∞–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏–π –Ω–∞ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–æ–æ–±—â–µ. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à—É –ª—É—á—à—É—é –æ—Ü–µ–Ω–∫—É –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤, –æ–¥–Ω–∞–∫–æ, —ç—Ç–æ –æ—Ü–µ–Ω–∫–∏. –ú—ã –Ω–µ –Ω–µ—Å—ë–º"
                                 "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Ç–µ—Ä—é —Å—Ä–µ–¥—Å—Ç–≤, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –∑–∞ —Ç–æ, —á—Ç–æ –≤–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –∑–∞ –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É. –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º—ã–π "
                                 "–∞–∫–∫–∞—É–Ω—Ç(—ã) –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏(—è—Ö), –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Ç–æ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ SMM –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. "
                                 "\n""–ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞–∫—Ä—É—á–∏–≤–∞–µ–º—ã–π –æ–±—å–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π –∏ –Ω–µ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π, –∏–ª–∏ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã, –∞ —Å–∞–º —Ñ–∞–∫—Ç –Ω–∞–∫—Ä—É—Ç–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω (–≤ –≤–∏–¥—É —Ç–æ–≥–æ —á—Ç–æ –±–æ—Ç—ã –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,"
                                 " –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Å–º–æ–≥–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª—É–≥—É). –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –º—ã –≤–µ—Ä–Ω—É—Ç—å –í–∞–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ —Å–º–æ–∂–µ–º."
                                 "\n""–£—á—Ç–∏—Ç–µ! –ü–æ–ª–∏—Ç–∏–∫–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∂–∏–≤–æ–µ, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ. "
                                 "–ü–æ—ç—Ç–æ–º—É —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ –æ–±—ã—á–Ω–æ –≤—ã—Å—Ç—É–ø–∞—é—Ç –ø—Ä–æ—Ç–∏–≤ –ª—é–±—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É—é—Ç —Å–≤–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—è–≤–ª—è—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ. –ü–æ–¥ –∑–∞–ø—Ä–µ—Ç —Ç–∞–∫ –∂–µ –ø–æ–ø–∞–¥–∞—é—Ç –∏ —Å–µ—Ä–≤–∏—Å—ã –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã, –¥–ª—è –≤–∞—Å –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–∏—Å–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –ü—Ä–∏ —ç—Ç–æ–º –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—ä—è–≤–∏—Ç—å –Ω–∏–∫–∞–∫–∏–µ –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏, "
                                 "–Ω–∏ –∫ —Å–µ—Ä–≤–∏—Å—É, –Ω–∏ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ. –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –ø—Ä–æ–≤–æ–¥–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Å—Ç—Ä–∞—Ö –∏ —Ä–∏—Å–∫. "
                                 "\n""–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —Å–ª—É—á–∞–µ–≤, –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è, –æ —á—ë–º –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–æ–±—â–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Ç–∏–∫–µ—Ç–æ–≤ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω, –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. "
                                 "–í—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–∫–∞–∑—ã"
                                 "\n""–í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —Ç–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å —Å–ø–æ—Ä –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å –ø–æ –ª—é–±–æ–π –∏–∑ –ø—Ä–∏—á–∏–Ω."
                                 "\n""–ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥–∏ –í—ã –ø–æ–¥–∞–¥–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤ –Ω–∞—Å —Å–ø–æ—Ä –∏–ª–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ —É—Å–ª—É–≥–∏,"
                                 " –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–∫–∞–∑–∞–Ω—ã (–∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ—Å—Ç–∞–≤—â–∏–∫—É), –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –í–∞—à–∏ –±—É–¥—É—â–∏–µ –∑–∞–∫–∞–∑—ã, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤ –≤–∞—Å –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ."
                                 "–ó–∞ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –∏–ª–∏ –≥—Ä—É–±–æ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –º—ã —Ç–∞–∫ –∂–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –í–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞."
                                 " –ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫ –∫–∞–∫–æ–π —Ç–æ –≤–æ–ø—Ä–æ—Å, –∏–ª–∏ –∫–∞–∫–∏–µ —Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ - –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –≤–µ–∂–ª–∏–≤–æ–π, –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞.", reply_markup=markup_inline)
#–ú–ï–ù–Æ –¢–ï–õ–ï–ì–ê
@dp.callback_query_handler(text_startswith="servicetg", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    podpichiki = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="telegrampodpichiki")
    podpichiki_RU = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (–†–æ—Å—Å–∏—è)", callback_data="telegramsubscrivers_RU")
    telegram_views = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="telegram_views")
    telegram_react_all = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º —Ä–µ–∞–∫—Ü–∏–∏ (–¥–ª—è –ª—é–±—ã—Ö —Ç–µ–º–∞—Ç–∏–∫)", callback_data="telegram_react_all")
    telegram_react = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º —Ä–µ–∞–∫—Ü–∏–∏üÜï", callback_data="telegram_react")
    telegram_react_prem = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–µ–º–∏—É–º —Ä–µ–∞–∫—Ü–∏–∏", callback_data="telegram_react_prem")
    telegram_comment = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="telegram_comment")
    telegram_repost = types.InlineKeyboardButton(text="–¢–µ–ª–µ–≥—Ä–∞–º —Ä–µ–ø–æ—Å—Ç—ã, –æ–ø—Ä–æ—Å—ã", callback_data="telegram_repost")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(podpichiki).add(podpichiki_RU).add(telegram_views).add(telegram_react_all).add(telegram_react).add(telegram_react_prem).add(telegram_comment).add(telegram_repost).add(nazad)

    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)



@dp.callback_query_handler(text_startswith="telegrampodpichiki", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    #print(testdata)
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(288) or str(i[0]) == str(261) or str(i[0]) == str(269) or str(i[0]) == str(262) or str(i[0]) == str(70) or str(i[0]) == str(263)):
            
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    

    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="telegramsubscrivers_RU", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup1 = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup1.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(112) or str(i[0]) == str(47) or str(i[0]) == str(1) or str(i[0]) == str(192) or str(i[0]) == str(282) or str(i[0]) == str(283)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup1.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup1.add(nazad)
    markup1.add(glavnoe_menu)

    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup1)

@dp.callback_query_handler(text_startswith="telegram_views", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(266) or str(i[0]) == str(100) or str(i[0]) == str(14) or str(i[0]) == str(111) or str(i[0]) == str(259) or str(i[0]) == str(26) or str(i[0]) == str(276) or str(i[0]) == str(275) or str(i[0]) == str(52)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.3f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)

    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="telegram_react_all", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(277) or str(i[0]) == str(228) or str(i[0]) == str(216) or str(i[0]) == str(217) or str(i[0]) == str(218) or str(i[0]) == str(219) or str(i[0]) == str(220) or str(i[0]) == str(221) or str(i[0]) == str(222) or str(i[0]) == str(223) or str(i[0]) == str(224) or str(i[0]) == str(225) or str(i[0]) == str(226) or str(i[0]) == str(257) or str(i[0]) == str(258)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'      
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="telegram_react", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(233) or str(i[0]) == str(232) or str(i[0]) == str(245) or str(i[0]) == str(244) or str(i[0]) == str(243) or str(i[0]) == str(242) or str(i[0]) == str(241) or str(i[0]) == str(240) or str(i[0]) == str(239) or str(i[0]) == str(238) or str(i[0]) == str(237) or str(i[0]) == str(235) or str(i[0]) == str(234) or str(i[0]) == str(294)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)

    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="telegram_react_prem", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(247) or str(i[0]) == str(256) or str(i[0]) == str(248) or str(i[0]) == str(249) or str(i[0]) == str(250) or str(i[0]) == str(251) or str(i[0]) == str(252) or str(i[0]) == str(253) or str(i[0]) == str(254) or str(i[0]) == str(255)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="telegram_comment", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(431254321421)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)

    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="telegram_repost", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Telegram") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetg")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(152) or str(i[0]) == str(76)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=i[0])) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)

    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

#–ú–ï–ù–Æ –í–ö
@dp.callback_query_handler(text_startswith="servicevk", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    vkLikes = types.InlineKeyboardButton(text="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ –ª–∞–π–∫–∏", callback_data="vklike")
    vkSubs = types.InlineKeyboardButton(text="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="vksubs")
    vkViews = types.InlineKeyboardButton(text="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="vkviews")
    vkReposts = types.InlineKeyboardButton(text="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ —Ä–µ–ø–æ—Å—Ç—ã", callback_data="vkrepost")
    vkComments = types.InlineKeyboardButton(text="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="vkcomment")
    vkOpros = types.InlineKeyboardButton(text="–í–∫–æ–Ω—Ç–∞–∫—Ç–µ –æ–ø—Ä–æ—Å—ã", callback_data="vkopros")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(vkLikes).add(vkSubs).add(vkViews).add(vkReposts).add(vkReposts).add(vkComments).add(vkOpros).add(nazad)
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)

@dp.callback_query_handler(text_startswith="vklike", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicevk")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(289) or str(i[0]) == str(138) or str(i[0]) == str(286) or str(i[0]) == str(56) or str(i[0]) == str(141) or str(i[0]) == str(151) or str(i[0]) == str(104) or str(i[0]) == str(72) or str(i[0]) == str(106) or str(i[0]) == str(201) or str(i[0]) == str(209)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'vk{i[0]}'))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="vksubs", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicevk")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(211) or str(i[0]) == str(136) or str(i[0]) == str(64) or str(i[0]) == str(212) or str(i[0]) == str(137) or str(i[0]) == str(65) or str(i[0]) == str(290) or str(i[0]) == str(215) or str(i[0]) == str(135) or str(i[0]) == str(205) or str(i[0]) == str(181)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'vk{i[0]}'))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="vkviews", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicevk")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(265) or str(i[0]) == str(122) or str(i[0]) == str(143) or str(i[0]) == str(161) or str(i[0]) == str(142) or str(i[0]) == str(140) or str(i[0]) == str(195) or str(i[0]) == str(202)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'vk{i[0]}'))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="vkrepost", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicevk")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(206) or str(i[0]) == str(210) or str(i[0]) == str(203)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'vk{i[0]}'))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="vkcomment", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicevk")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(204)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'vk{i[0]}'))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

@dp.callback_query_handler(text_startswith="vkopros", state="*")
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ") 
    markup = types.InlineKeyboardMarkup() # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicevk")
    markup.row_width = 1 # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata: # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(268) or str(i[0]) == str(165)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'vk{i[0]}'))) #–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

#–ú–ï–ù–Æ –ò–ù–°–¢–ê
@dp.callback_query_handler(text_startswith="serviceinst", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    instalike = types.InlineKeyboardButton(text="Instagram –ª–∞–π–∫–∏ (–º–∏–∫—Å)", callback_data="instagramlike")
    instalikereal = types.InlineKeyboardButton(text="Instagram –ª–∞–π–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ)", callback_data="instagramlikereal")
    instasub = types.InlineKeyboardButton(text="Instagram –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (–º–∏–∫—Å)", callback_data="instagramsubsriber")
    instasubreal = types.InlineKeyboardButton(text="Instagram –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ)", callback_data="instagramsubcriberreal")
    instasubpod = types.InlineKeyboardButton(text="Instagram –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ (—Å –¥–æ–∫—Ä—É—Ç–∫–æ–π)üîÉ", callback_data="instagramsubcriberpod")
    instaview = types.InlineKeyboardButton(text="Instagram –ø—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="instagramview")
    instacomm = types.InlineKeyboardButton(text="Instagram –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="instagramcomments")
    instastat = types.InlineKeyboardButton(text="Instagram —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="instagramstatic")
    instaque = types.InlineKeyboardButton(text="‚ùì‚ùì‚ùì", callback_data="instagramquestion")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(instalike).add(instalikereal).add(instasub).add(instasubreal).add(instasubpod).add(instaview).add(instacomm).add(instastat).add(instaque).add(nazad)

    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)


# INSAGRAM –ª–∞–π–∫–∏(–º–∏–∫—Å)
@dp.callback_query_handler(text_startswith="instagramlike", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()
    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(21) or str(i[0]) == str(285) or str(i[0]) == str(96) or str(i[0]) == str(157) or str(i[0]) == str(171) or str(i[0]) == str(62) or str(i[0]) == str(134) or str(i[0]) == str(267) or str(i[0]) == str(48) or str(i[0]) == str(110) or str(i[0]) == str(63) or str(i[0]) == str(24) or str(i[0]) == str(105) or str(i[0]) == str(50)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM –ª–∞–π–∫–∏(—Ä–µ–∞–ª—å–Ω—ã–µ)
@dp.callback_query_handler(text_startswith="instagramlikereal", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(6) or str(i[0]) == str(121) or str(i[0]) == str(145) or str(i[0]) == str(89) or str(
                i[0]) == str(99) or str(i[0]) == str(101) or str(i[0]) == str(187) or str(i[0]) == str(60) or str(
                i[0]) == str(144) or str(i[0]) == str(108) or str(i[0]) == str(120) or str(i[0]) == str(49) or str(
                i[0]) == str(53)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM –ø–æ–¥–ø–∏—Å—á–∏–∫–∏(–º–∏–∫—Å)
@dp.callback_query_handler(text_startswith="instagramsubsriber", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(163) or str(i[0]) == str(127) or str(i[0]) == str(92) or str(i[0]) == str(31) or str(
                i[0]) == str(33) or str(i[0]) == str(78)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM –ø–æ–¥–ø–∏—Å—á–∏–∫–∏(—Ä–µ–∞–ª—å–Ω—ã–µ)
@dp.callback_query_handler(text_startswith="instagramsubcriberreal", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(83) or str(i[0]) == str(128) or str(i[0]) == str(23) or str(i[0]) == str(84) or str(
                i[0]) == str(44) or str(i[0]) == str(277) or str(i[0]) == str(85)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM –ø–æ–¥–ø–∏—Å—á–∏–∫–∏(—Å –¥–æ–∫—Ä—É—Ç–∫–æ–π)
@dp.callback_query_handler(text_startswith="instagramsubcriberpod", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(293) or str(i[0]) == str(75) or str(i[0]) == str(113) or str(i[0]) == str(125) or str(
                i[0]) == str(183) or str(i[0]) == str(132) or str(i[0]) == str(79) or str(i[0]) == str(77) or str(
                i[0]) == str(77) or str(i[0]) == str(130) or str(i[0]) == str(148) or str(i[0]) == str(67)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
@dp.callback_query_handler(text_startswith="instagramview", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(146) or str(i[0]) == str(71) or str(i[0]) == str(102) or str(i[0]) == str(43) or str(
                i[0]) == str(158) or str(i[0]) == str(200) or str(i[0]) == str(147) or str(i[0]) == str(55) or str(
                i[0]) == str(40) or str(i[0]) == str(41) or str(i[0]) == str(32) or str(i[0]) == str(38) or str(
                i[0]) == str(8)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
@dp.callback_query_handler(text_startswith="instagramcomments", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(177) or str(i[0]) == str(199) or str(i[0]) == str(180) or str(i[0]) == str(189) or str(
                i[0]) == str(51) or str(i[0]) == str(39) or str(i[0]) == str(74)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.callback_query_handler(text_startswith="instagramstatic", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(186) or str(i[0]) == str(82) or str(i[0]) == str(10) or str(i[0]) == str(169) or str(
                i[0]) == str(168) or str(i[0]) == str(36) or str(i[0]) == str(149)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# INSAGRAM ???
@dp.callback_query_handler(text_startswith="instagramquestion", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Instagram")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceinst")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(176) or str(i[0]) == str(271) or str(i[0]) == str(22) or str(i[0]) == str(73) or str(
                i[0]) == str(19) or str(i[0]) == str(159) or str(i[0]) == str(54)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(f'in{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)


#–ú–ï–ù–Æ –Æ–¢–£–ë
@dp.callback_query_handler(text_startswith="serviceyt", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    youtubelike = types.InlineKeyboardButton(text="Youtube –ª–∞–π–∫–∏ –∏ –¥–∏–∑–ª–∞–π–∫–∏", callback_data="youtubelikeanddislike")
    youtubeview = types.InlineKeyboardButton(text="Youtube –ø—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="youtubeviews")
    youtubesub = types.InlineKeyboardButton(text="Youtube –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="youtubesubscriber")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(youtubelike).add(youtubeview).add(youtubesub).add(nazad)
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)


#YOUTUBE –õ–ê–ô–ö–ò –ò –î–ò–ó–õ–ê–ô–ö–ò
@dp.callback_query_handler(text_startswith="youtubelikeanddislike", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Youtube")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceyt")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(66) or str(i[0]) == str(119) or str(i[0]) == str(167) or str(i[0]) == str(162)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'yt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)
    
# YOUTUBE –ü–†–û–°–ú–û–¢–†–´
@dp.callback_query_handler(text_startswith="youtubeviews", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Youtube")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceyt")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(178) or str(i[0]) == str(198) or str(i[0]) == str(197) or str(i[0]) == str(179) or str(
                i[0]) == str(284) or str(i[0]) == str(196)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'yt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)
    
# YOUTUBE –ü–û–î–ü–ò–°–ß–ò–ö–ò
@dp.callback_query_handler(text_startswith="youtubesubscriber", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Youtube")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(118)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'yt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)


#–ú–ï–ù–Æ –¢–ò–ö –¢–û–ö
@dp.callback_query_handler(text_startswith="servicett", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    tiktoksub = types.InlineKeyboardButton(text="TikTok –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="tiktoksubscriber")
    tiktokvi = types.InlineKeyboardButton(text="TikTok –ø—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="tiktokview")
    tiktoklik = types.InlineKeyboardButton(text="TikTok –ª–∞–π–∫–∏", callback_data="tiktoklike")
    tiktokrep = types.InlineKeyboardButton(text="TikTok —Ä–µ–ø–æ—Å—Ç—ã", callback_data="tiktokrepost")
    tiktokcom = types.InlineKeyboardButton(text="TikTok –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="tiktokcomments")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(tiktoksub).add(tiktokvi).add(tiktoklik).add(tiktokrep).add(tiktokcom).add(nazad)
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)

# TIKTOK –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
@dp.callback_query_handler(text_startswith="tiktoksubscriber", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "TikTok")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicett")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(68) or str(i[0]) == str(35) or str(i[0]) == str(20) or str(i[0]) == str(4) or str(
                i[0]) == str(273) or str(i[0]) == str(129) or str(i[0]) == str(123) or str(i[0]) == str(156)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# TIKTOK –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
@dp.callback_query_handler(text_startswith="tiktokview", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "TikTok")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicett")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(29) or str(i[0]) == str(190) or str(i[0]) == str(153) or str(i[0]) == str(172) or str(
                i[0]) == str(45) or str(i[0]) == str(28)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# TIKTOK –ª–∞–π–∫–∏
@dp.callback_query_handler(text_startswith="tiktoklike", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "TikTok")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicett")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(12) or str(i[0]) == str(61) or str(i[0]) == str(46) or str(i[0]) == str(292) or str(
                i[0]) == str(34) or str(i[0]) == str(11) or str(i[0]) == str(274) or str(i[0]) == str(173) or str(
                i[0]) == str(126)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# TIKTOK —Ä–µ–ø–æ—Å—Ç—ã
@dp.callback_query_handler(text_startswith="tiktokrepost", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "TikTok")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicett")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(174) or str(i[0]) == str(193)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# TIKTOK –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
@dp.callback_query_handler(text_startswith="tiktokcomments", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "TikTok")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicett")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(103) or str(i[0]) == str(213)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tt{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

#–ú–ï–ù–Æ –¢–í–ò–¢–¢–ï–†
@dp.callback_query_handler(text_startswith="servicetwt", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    twitterlike = types.InlineKeyboardButton(text="Twitter –ª–∞–π–∫–∏", callback_data="twitterlik")
    twitterret = types.InlineKeyboardButton(text="Twitter —Ä–µ—Ç–≤–∏—Ç—ã", callback_data="twitterretvit")
    twitterfoll = types.InlineKeyboardButton(text="Twitter —Ñ–æ–ª–ª–æ–≤–µ—Ä—ã", callback_data="twitterfollow")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(twitterlike).add(twitterret).add(twitterfoll).add(nazad)

    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)

# Twitter –ª–∞–π–∫–∏
@dp.callback_query_handler(text_startswith="twitterlik", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Twitter")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetwt")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(30)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tw{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# Twitter —Ä–µ—Ç–≤–∏—Ç—ã
@dp.callback_query_handler(text_startswith="twitterretvit", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Twitter")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetwt")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(15)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tw{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# Twitter —Ñ–æ–ª–ª–æ–≤–µ—Ä—ã
@dp.callback_query_handler(text_startswith="twitterfollow", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Twitter")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicetwt")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(25)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'tw{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

#–ú–ï–ù–Æ –õ–ê–ô–ö(–°–ï–†–í–ò–° –¢–ê–ö–û–ô)
@dp.callback_query_handler(text_startswith="servicelk", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    likeelik = types.InlineKeyboardButton(text="Likee –ª–∞–π–∫–∏", callback_data="likeelike")
    likeesub = types.InlineKeyboardButton(text="Likee –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="likeesubscriber")
    likeeprosmoti = types.InlineKeyboardButton(text="Likee –ø—Ä–æ—Å–º–æ—Ç—Ä—ã", callback_data="likeeview")
    likeerep = types.InlineKeyboardButton(text="Likee —Ä–µ–ø–æ—Å—Ç—ã", callback_data="likeerepost")
    likeecom = types.InlineKeyboardButton(text="Likee –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏", callback_data="likeecomments")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(likeelik).add(likeesub).add(likeeprosmoti).add(likeerep).add(likeecom).add(nazad)

    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)

# Likee –ª–∞–π–∫–∏
@dp.callback_query_handler(text_startswith="likeelike", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Likee")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicelk")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(2)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'li{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# Likee –ü–û–î–ü–ò–°–ß–ò–ö–ò
@dp.callback_query_handler(text_startswith="likeesubscriber", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Likee")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicelk")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(59)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'li{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# Likee –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
@dp.callback_query_handler(text_startswith="likeeview", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Likee")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicelk")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(5)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'li{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# Likee —Ä–µ–ø–æ—Å—Ç—ã
@dp.callback_query_handler(text_startswith="likeerepost", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Likee")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicelk")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(3)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'li{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)

# Likee –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
@dp.callback_query_handler(text_startswith="likeecomments", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "Likee")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="servicelk")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(9)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'li{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)


#–ú–ï–ù–Æ –û–î–ù–û–ö–õ–ê–°–°–ù–ò–ö–ò
@dp.callback_query_handler(text_startswith="serviceok", state="*")
async def next_page(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    current_state = await state.get_state()
    print("state: ",current_state)
    if current_state:  
        await state.finish()
    markup_inline = types.InlineKeyboardMarkup()
    podpichiki = types.InlineKeyboardButton(text="–û–ö –∫–ª–∞—Å—Å—ã", callback_data="okclassi")
    podpichiki_RU = types.InlineKeyboardButton(text="–û–ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∏", callback_data="okpodpichiki")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="nakrutkaa")
    markup_inline.add(podpichiki).add(podpichiki_RU).add(nazad)

    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –Ω–∞–∫—Ä—É—Ç–∫–∏:", reply_markup=markup_inline)

# –û–ö –ö–õ–ê–°–°–´
@dp.callback_query_handler(text_startswith="okclassi", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceok")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(7)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'ok{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)
    
# –û–ö –ü–û–î–ü–ò–°–ß–ò–ö–ò
@dp.callback_query_handler(text_startswith="okpodpichiki", state="*")  # (–ü–û–ú–ï–ù–Ø–¢–¨ –ê–ô–î–ò)
async def next_page(call: types.CallbackQuery):
    await call.answer()

    testdata = request.checkList("packages", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏")
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–ú–µ–Ω—é", callback_data="Start")
    nazad = types.InlineKeyboardButton(text="‚ñ∂Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ü.—Å–µ—Ç–∏", callback_data="serviceok")
    markup.row_width = 1  # –∫–æ–ª-–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    cashUser = getSettings('config_main.txt')[1]
    cashAdmin = getSettings('config_main.txt')[2]
    for i in testdata:  # —Ü–∏–∫–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        if (str(i[0]) == str(150) or str(i[0]) == str(191) or str(i[0]) == str(57) or str(i[0]) == str(214)):
            nameButton = f'{i[1]} |–¶–µ–Ω–∞: {float("{:.2f}".format((((i[5]/1000) * (float(int(cashUser) + int(cashAdmin))/100)) + (i[5]/1000)))) }—Ä./1'
            markup.add(types.InlineKeyboardButton(nameButton, callback_data=(
                f'ok{i[0]}')))  # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏, i[1] - –Ω–∞–∑–≤–∞–Ω–∏–µ, i[2] - –∫–∞–ª–ª–±–µ–∫ –¥–∞—Ç–∞
    markup.add(nazad)
    markup.add(glavnoe_menu)
    await call.message.edit_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫—Ä—É—Ç–∏—Ç—å?", reply_markup=markup)


#–ö–∞–ª–ª–±–µ–∫ –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(lambda call: True)
async def stoptopupcall(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    
    markup_inline = types.InlineKeyboardMarkup()
    if call.data.find("vk") == 0:
        callbackButton = "servicevk"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)

        rightCall = re.sub(r'[^0-9]+', r'', call.data)
        testdata = request.checkList("packages", "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ")
        for dictionary in testdata:
            if any(map(str.isdigit, rightCall)):
                if (int(dictionary[0]) == int(rightCall)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = rightCall
                        data['message_id'] = "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ"
                    #global_dict(call.message.message_id, rightCall, "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ", "add")
                    await InputCountNumber.link_text.set()

    elif call.data.find("in") == 0:
        callbackButton = "serviceinst"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)

        rightCall = re.sub(r'[^0-9]+', r'', call.data)
        testdata = request.checkList("packages", "Instagram")
        for dictionary in testdata:
            if any(map(str.isdigit, rightCall)):
                if (int(dictionary[0]) == int(rightCall)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = rightCall
                        data['message_id'] = "Instagram"
                    #global_dict(call.message.message_id, rightCall, "Instagram", "add")
                    await InputCountNumber.link_text.set()

    elif call.data.find("yt") == 0:
        callbackButton = "serviceyt"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)

        rightCall = re.sub(r'[^0-9]+', r'', call.data)
        testdata = request.checkList("packages", "Youtube")
        for dictionary in testdata:
            if any(map(str.isdigit, rightCall)):
                if (int(dictionary[0]) == int(rightCall)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = rightCall
                        data['message_id'] = "Youtube"
                    #global_dict(call.message.message_id, rightCall, "Youtube", "add")
                    await InputCountNumber.link_text.set()

    elif call.data.find("tt") == 0:
        callbackButton = "servicett"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)

        rightCall = re.sub(r'[^0-9]+', r'', call.data)
        testdata = request.checkList("packages", "TikTok")
        for dictionary in testdata:
            if any(map(str.isdigit, rightCall)):
                if (int(dictionary[0]) == int(rightCall)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = rightCall
                        data['message_id'] = "TikTok"
                    #global_dict(call.message.message_id, rightCall, "TikTok", "add")
                    await InputCountNumber.link_text.set()
    
    elif call.data.find("tw") == 0:
        callbackButton = "servicetwt"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)

        rightCall = re.sub(r'[^0-9]+', r'', call.data)
        testdata = request.checkList("packages", "Twitter")
        for dictionary in testdata:
            if any(map(str.isdigit, rightCall)):
                if (int(dictionary[0]) == int(rightCall)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = rightCall
                        data['message_id'] = "Twitter"
                    #global_dict(call.message.message_id, rightCall, "Twitter", "add")
                    await InputCountNumber.link_text.set()

    elif call.data.find("li") == 0:
        callbackButton = "servicelk"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)

        rightCall = re.sub(r'[^0-9]+', r'', call.data)
        testdata = request.checkList("packages", "Likee")
        for dictionary in testdata:
            if any(map(str.isdigit, rightCall)):
                if (int(dictionary[0]) == int(rightCall)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = rightCall
                        data['message_id'] = "Likee"
                    #global_dict(call.message.message_id, rightCall, "Likee", "add")
                    await InputCountNumber.link_text.set()

    elif call.data.find("ok") == 0:
        callbackButton = "serviceok"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)

        rightCall = re.sub(r'[^0-9]+', r'', call.data)
        testdata = request.checkList("packages", "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏")
        for dictionary in testdata:
            if any(map(str.isdigit, rightCall)):
                if (int(dictionary[0]) == int(rightCall)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = rightCall
                        data['message_id'] = "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏"
                    #global_dict(call.message.message_id, rightCall, "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏", "add")
                    await InputCountNumber.link_text.set()
    else:
        callbackButton = "servicetg"
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackButton)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(nazad).add(glavnoe_menu)
        
        testdata = request.checkList("packages", "Telegram")
        for dictionary in testdata:
            if any(map(str.isdigit, call.data)):
                if (int(dictionary[0]) == int(call.data)):
                    answer = dictionary[2].split('‚åõ')[1]
                    answer1 = re.sub(r'–°([^<>]+)–û','\n–û', answer)
                    answer1 = re.sub(r'!([^<>]+)–í','\n‚ÄºÔ∏è–í', answer1)
                    await call.message.edit_text(f'{answer1}, \n \n \n –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: ', reply_markup=markup_inline) # –¥–µ–ª–∞–µ–º –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
                    #global_dict(call.message.message_id, call.data,"Telegram", "add")

                    await state.set_state(InputCountNumber.link_text)
                    async with state.proxy() as data:
                        data['call_message_id1'] = call.message.message_id
                        data['rightCall'] = call.data
                        data['message_id'] = "Telegram"

    
#–û–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É
@dp.message_handler(state=InputCountNumber.link_text)  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def started(message: types.Message, state: FSMContext):

    data_state = await state.get_data()
    ref_id_1lv = data_state.get("message_id")
    messageID_state = data_state.get("call_message_id1")
    rightCall = data_state.get("rightCall")
    print(data_state)
    #await state.finish()
    current_state = await state.get_state()
    print("state: ",current_state)

    async with state.proxy() as proxy:
        proxy['messagesend'] = message.text 
    if proxy["messagesend"] != "" and proxy["messagesend"] != "/start":
        print("wait link state")
        callbackList = ""
        if ref_id_1lv == "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ":
            callbackList = "servicevk"
        elif ref_id_1lv == "Instagram":
            callbackList = "serviceinst"
        elif ref_id_1lv == "Youtube":
            callbackList = "serviceyt"
        elif ref_id_1lv == "TikTok":
            callbackList = "servicett"
        elif ref_id_1lv == "Twitter":
            callbackList = "servicetwt"
        elif ref_id_1lv == "Likee":
            callbackList = "servicelk"
        elif ref_id_1lv == "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏":
            callbackList = "serviceok"
        else:
           callbackList = "servicetg" 

        
        markup_inlinets = types.InlineKeyboardMarkup()
        nazadBtn = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackList)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inlinets.add(nazadBtn).add(glavnoe_menu)

        answer = message.text #—Å–æ—Ö—Ä–∞–Ω–∞—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞
        extractor = urlextract.URLExtract()
        urls = extractor.find_urls(answer)
        
        if urls == []:
            await bot.delete_message(message.chat.id, message.message_id)
                
            messageID = messageID_state
            await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {answer} \n \n –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏', reply_markup=markup_inlinets)
            #await state.finish()
            await InputCountNumber.link_text.set()
            print("error_link")
        else:    
            #global_dict("", "", answer, "add")
            testdata = request.checkList("packages", ref_id_1lv) 
            for dictionary in testdata:
                if int(dictionary[0]) == int(rightCall):
                    messageID = messageID_state
                    await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'üü¢–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {answer} \n \nüü†–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏: \n \n‚¨áÔ∏è–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ: {dictionary[4]} \n‚¨ÜÔ∏è–ú–∏–Ω–∏–∏–º–∞–ª—å–Ω–æ: {dictionary[3]}\n', reply_markup=markup_inlinets, disable_web_page_preview=True)
                    await state.finish()
                    await InputCountNumber.number_count.set()
                    async with state.proxy() as data:
                        data['answer'] = message.text
                        data['message_id'] = ref_id_1lv
                        data['rightCall'] = rightCall
                        data['call_message_id1'] = messageID_state
        
        await bot.delete_message(message.chat.id, message.message_id)
        #await state.finish()
    else:
        await state.finish()  # –í—ã–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


#–í–¢–û–†–ê–Ø –ú–ê–®–ò–ù–ê –û–ñ–ò–î–ê–ù–ò–ô(–ö–û–õ–ò–ß–ï–°–¢–í–û)
@dp.message_handler(state=InputCountNumber.number_count) 
async def naviga(message: types.Message, state: FSMContext):
    print("state count agter link")
    data_state = await state.get_data()
    ref_id_1lv = data_state.get("message_id")
    messageID_state = data_state.get("call_message_id1")
    rightCall = data_state.get("rightCall")
    link = data_state.get("answer")
    print(data_state)
    #await state.finish()
    current_state = await state.get_state()
    print("state: ",current_state)
    
    async with state.proxy() as proxy:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        proxy['messagesendCount'] = message.text
    if proxy["messagesendCount"] != "" and proxy["messagesendCount"] != "/start":


        callbackList = ""
        if ref_id_1lv == "–í–∫–æ–Ω—Ç–∞–∫—Ç–µ":
            callbackList = "servicevk"
        elif ref_id_1lv == "Instagram":
            callbackList = "serviceinst"
        elif ref_id_1lv == "Youtube":
            callbackList = "serviceyt"
        elif ref_id_1lv == "TikTok":
            callbackList = "servicett"
        elif ref_id_1lv == "Twitter":
            callbackList = "servicetwt"
        elif ref_id_1lv == "Likee":
            callbackList = "servicelk"
        elif ref_id_1lv == "–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏":
            callbackList = "serviceok"
        else:
           callbackList = "servicetg"


        markup_inline = types.InlineKeyboardMarkup()
        oplataGenOrder = types.InlineKeyboardButton(text="‚úÖ–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="completeOrders")
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackList)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inline.add(oplataGenOrder).add(nazad).add(glavnoe_menu)

        markup_inlineBad = types.InlineKeyboardMarkup()
        nazad = types.InlineKeyboardButton(text="‚ñ∂–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏", callback_data=callbackList)
        glavnoe_menu = types.InlineKeyboardButton(text="‚ñ∂–ú–µ–Ω—é", callback_data="Start")
        markup_inlineBad.add(nazad).add(glavnoe_menu)

        cashUser = getSettings('config_main.txt')[1]
        cashAdmin = getSettings('config_main.txt')[2]
        answerCount = message.text 
        messageID = messageID_state
        testdata = request.checkList("packages", ref_id_1lv)
        for dictionary in testdata:
            if int(dictionary[0]) == int(rightCall):

                orderCost = float('{:.2f}'.format((((float(dictionary[5])/1000) * float(answerCount)) * (float(int(cashUser) + int(cashAdmin))/100)) + ((float(dictionary[5])/1000) * float(answerCount)))) 
                
                if(int(answerCount) <= int(dictionary[4]) and int(answerCount) >= int(dictionary[3])):
                    await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'‚úÖ–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: {link} \nüî•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {answerCount}\nüî•–°—Ç–æ–∏–º–æ—Å—Ç—å: {orderCost}—Ä. \n–û–ø–ª–∞—Ç–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å', reply_markup=markup_inline, disable_web_page_preview=True)
                    await state.finish()
                    async with state.proxy() as data:
                        data['answer'] = link
                        data['answerCount'] = answerCount
                        data['orderCost'] = orderCost
                        data['dictionary[0]'] = dictionary[0]
                    #global_dict(answerCount,orderCost,dictionary[0],"add")
                else:
                    await bot.edit_message_text(chat_id=message.from_user.id, message_id=messageID, text=f'‚ùå–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ \n \n‚¨áÔ∏è–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ: {dictionary[4]} \n‚¨ÜÔ∏è–ú–∏–Ω–∏–∏–º–∞–ª—å–Ω–æ: {dictionary[3]}\n',reply_markup=markup_inlineBad)
                    await InputCountNumber.number_count.set()
                    await state.finish()
                    async with state.proxy() as data:
                        data['answer'] = link
                        data['message_id'] = ref_id_1lv
                        data['rightCall'] = rightCall
                        data['call_message_id1'] = messageID_state
            else:
                await InputCountNumber.number_count.set() #–û–ß–ï–ù–¨ –û–ß–ï–ù–¨ –û–ü–ê–°–ù–û(–ú–û–ì–£–¢ –ë–´–¢–¨ –ó–ê–í–ò–°–ê–ù–ò–Ø –ü–†–Ø–ú –ì–ì)
        await bot.delete_message(message.chat.id, message.message_id)
        #await state.finish()
    else:
        await state.finish()


#–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–û–í –ó–ê–ö–ê–ó–ê
async def scheduledOrder(wait_for):
  while True:
    await asyncio.sleep(wait_for)
    #–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ó–ê–ö–ê–ó–ê
    print("ORDER STATUS CHECKING...")
    baseOrders = baseMain.execute(f'SELECT order_number, id_user, money, status FROM USER_ORDER').fetchall()  
    for orderB in baseOrders:
        checkOrders = request.checkingOrderStatus("status", orderB[0])
        if checkOrders[0] == "Completed":
            baseOrders = baseMain.execute(f'UPDATE USER_ORDER SET status = "–í—ã–ø–æ–ª–Ω–µ–Ω‚úÖ" WHERE order_number = "{orderB[0]}"')
            baseMain.commit()
        elif checkOrders[0] == "Inprogress":
            baseOrders = baseMain.execute(f'UPDATE USER_ORDER SET status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ‚è≥" WHERE order_number = "{orderB[0]}"')
            baseMain.commit()
        elif checkOrders[0] == "Cancelled" and orderB[3] != "–û—Ç–º–µ–Ω—ë–Ω‚ùå(–ë–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω)":
            oldBalace = baseMain.execute(f'SELECT money FROM USERS WHERE user_id = {orderB[1]}').fetchone()[0]
            refBalance = float(oldBalace) + float(orderB[2])

            baseMain.execute(f'UPDATE USERS SET money = {refBalance} WHERE user_id = "{orderB[1]}"')
            baseMain.commit()

            baseOrders = baseMain.execute(f'UPDATE USER_ORDER SET status = "–û—Ç–º–µ–Ω—ë–Ω‚ùå(–ë–∞–ª–∞–Ω—Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω)" WHERE order_number = "{orderB[0]}"')
            baseMain.commit()

#–ü–†–û–í–ï–†–ö–ê –û–ü–õ–ê–¢(–ö–û–¢–û–†–´–ï –ë–û–¢ –ù–ï –ó–ê–ú–ï–¢–ò–õ)
async def checkpayError(wait_for):
  while True:
    await asyncio.sleep(wait_for)
    #–ü–†–û–í–ï–†–ö–ê –°–ü–ò–°–ö–ê –û–ü–õ–ê–¢
    print("PAY ERROR STATUS CHECKING...")
    basePays = baseMain.execute(f'SELECT user_id, sum_cash, status, secretLabel, date FROM USER_PAY WHERE status = "WAIT" OR status = "success" AND good_pay_check = "False"').fetchall()  
    for payonce in basePays:
        statusCheck = testoplata.check_pay_test(payonce[3])
        print(payonce[3])
        if statusCheck[0] == "success":
            try:
                
                baseMain.execute(f'UPDATE USER_PAY SET status = "success", good_pay_check = "True" WHERE secretLabel = "{payonce[3]}"')
                baseMain.commit()
                oldBalance =  baseMain.execute(f'SELECT money FROM USERS WHERE user_id = "{payonce[0]}"').fetchone()[0]
                balanceToBase = float('{:.2f}'.format(oldBalance + statusCheck[1]))
                baseMain.execute(f'UPDATE USERS SET money="{balanceToBase}" WHERE user_id="{payonce[0]}"')
                baseMain.commit()

                markup_inlineGood = types.InlineKeyboardMarkup()
                glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
                markup_inlineGood.add(glavnoe_menu)
                await bot.send_message(chat_id=payonce[0], text=f'‚úÖ–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {statusCheck[1]}—Ä.', reply_markup=markup_inlineGood)
            except Exception as errorP:
                print(errorP)


class checkMoneyTake:
    work = True

    #–ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–û–í –û–ü–õ–ê–¢–´(–∞–≤—Ç–æ—á–µ–∫)
    async def scheduledOplata(wait_for, user_id, message_id):
        while True:
            while checkMoneyTake.work:
                
                print("PAY STATUS CHECKING...")
                #print(get_data)
                await asyncio.sleep(wait_for)
                timeStarOrder = datetime.now().minute
                timeStopOrder = timeStarOrder + 15
                if timeStopOrder >= 60:
                    timeStopOrder = timeStopOrder - 60
                if timeStarOrder != timeStopOrder:
                    basePay = baseMain.execute(f'SELECT user_id, sum_cash, status, secretLabel, date FROM USER_PAY WHERE user_id = {user_id} AND status = "WAIT"').fetchall()
                    for baseStatus in basePay:
                        dateNow = datetime.today().strftime('%Y-%m-%d')
                        dateNowGood = datetime.strptime(dateNow, '%Y-%m-%d')
                        my_dt = datetime.strptime(baseStatus[4], '%Y-%m-%d %H:%M:%S')
                        my_dtNew = my_dt.strftime('%Y-%m-%d')
                        mydtNewGood = datetime.strptime(my_dtNew, '%Y-%m-%d')
                        if baseStatus[2] == "WAIT" and mydtNewGood < dateNowGood:
                            baseMain.execute(f'DELETE FROM USER_PAY WHERE status = "WAIT"')
                            baseMain.commit()
                        requestOplata = testoplata.check_pay(baseStatus[3])
                        try:
                            if requestOplata[0] == "success":
                                basePay = baseMain.execute(f'UPDATE USER_PAY SET status = "success", good_pay_check = "True" WHERE secretLabel = "{baseStatus[3]}"')
                                baseMain.commit()
                                oldBalance =  baseMain.execute(f'SELECT money FROM USERS WHERE user_id = "{user_id}"').fetchone()[0]
                                balanceToBase = float('{:.2f}'.format(oldBalance + requestOplata[1]))
                                baseMain.execute(f'UPDATE USERS SET money="{balanceToBase}" WHERE user_id="{user_id}"')
                                baseMain.commit()

                                markup_inlineGood = types.InlineKeyboardMarkup()
                                glavnoe_menu = types.InlineKeyboardButton(text="‚ùå–ó–∞–∫—Ä—ã—Ç—å", callback_data="Start")
                                markup_inlineGood.add(glavnoe_menu)

                                await bot.edit_message_text(chat_id=user_id, message_id=message_id, text=f'‚úÖ–í–∞—à –±–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {requestOplata[1]}—Ä.', reply_markup=markup_inlineGood)
                                #await asyncio.sleep(wait_for * 18000) #–ï–°–õ–ò –°–õ–û–ú–ê–õ–û–°–¨ –û–ñ–ò–î–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê, –¢–û –í–ö–õ –≠–¢–û
                                return "good"
                        except Exception:
                            #print("error")
                            continue
                else:
                    return "time"
            else:
                return "stop"
    
#keep_alive()
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduledOrder(600)) # –ø–æ—Å—Ç–∞–≤–∏–º 10 –º–∏–Ω—É—Ç, –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–∞
    loop.create_task(checkpayError(600)) # –ø–æ—Å—Ç–∞–≤–∏–º 10 –º–∏–Ω—É—Ç
    executor.start_polling(dp, skip_updates=True)


#2) –°–î–ï–õ–ê–¢–¨ –°–í–û–ô –í–í–û–î –¢–ï–ö–°–¢ –ö–û–ú–ú–ï–ù–¢–ê –í–ö, INST